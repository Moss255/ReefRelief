// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

namespace flixel{
namespace graphics{
namespace frames{

void FlxAtlasFrames_obj::__construct( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","new",0xed20cbc8,"flixel.graphics.frames.FlxAtlasFrames.new","flixel/graphics/frames/FlxAtlasFrames.hx",22,0x501ecb67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
            	HX_STACK_ARG(border,"border")
HXLINE(  22)		super::__construct(parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::ATLAS_dyn(),border);
            	}

Dynamic FlxAtlasFrames_obj::__CreateEmpty() { return new FlxAtlasFrames_obj; }

hx::ObjectPtr< FlxAtlasFrames_obj > FlxAtlasFrames_obj::__new( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border)
{
	hx::ObjectPtr< FlxAtlasFrames_obj > _hx_result = new FlxAtlasFrames_obj();
	_hx_result->__construct(parent,border);
	return _hx_result;
}

Dynamic FlxAtlasFrames_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxAtlasFrames_obj > _hx_result = new FlxAtlasFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::flixel::graphics::frames::FlxFramesCollection FlxAtlasFrames_obj::addBorder( ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","addBorder",0x1a31fb55,"flixel.graphics.frames.FlxAtlasFrames.addBorder","flixel/graphics/frames/FlxAtlasFrames.hx",385,0x501ecb67)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(border,"border")
HXLINE( 386)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 386)		point->_inPool = false;
HXDLIN( 386)		point->_weak = true;
HXDLIN( 386)		HX_VARI(  ::flixel::math::FlxPoint,resultBorder) = point->addPoint(this->border)->addPoint(border);
HXLINE( 387)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,atlasFrames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(this->parent,resultBorder);
HXLINE( 388)		Bool _hx_tmp = hx::IsNotNull( atlasFrames );
HXDLIN( 388)		if (_hx_tmp) {
HXLINE( 389)			return atlasFrames;
            		}
HXLINE( 391)		atlasFrames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(this->parent,resultBorder);
HXLINE( 393)		{
HXLINE( 393)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 393)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->frames;
HXDLIN( 393)			while((_g < _g1->length)){
HXLINE( 393)				HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 393)				++_g;
HXLINE( 394)				 ::flixel::graphics::frames::FlxFrame _hx_tmp1 = frame->setBorderTo(border,null());
HXDLIN( 394)				atlasFrames->pushFrame(_hx_tmp1);
            			}
            		}
HXLINE( 396)		return atlasFrames;
            	}


 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromTexturePackerJson( ::Dynamic Source,::String Description){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","fromTexturePackerJson",0xae76e627,"flixel.graphics.frames.FlxAtlasFrames.fromTexturePackerJson","flixel/graphics/frames/FlxAtlasFrames.hx",33,0x501ecb67)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Description,"Description")
HXLINE(  34)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(Source,false,null());
HXLINE(  35)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  36)			return null();
            		}
HXLINE(  39)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,frames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE(  40)		Bool _hx_tmp1 = hx::IsNotNull( frames );
HXDLIN(  40)		if (_hx_tmp1) {
HXLINE(  41)			return frames;
            		}
HXLINE(  43)		Bool _hx_tmp2;
HXDLIN(  43)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN(  43)		if (_hx_tmp3) {
HXLINE(  43)			_hx_tmp2 = hx::IsNull( Description );
            		}
            		else {
HXLINE(  43)			_hx_tmp2 = true;
            		}
HXDLIN(  43)		if (_hx_tmp2) {
HXLINE(  44)			return null();
            		}
HXLINE(  46)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(graphic,null());
HXLINE(  48)		Bool _hx_tmp4 = ::openfl::_legacy::Assets_obj::exists(Description,null());
HXDLIN(  48)		if (_hx_tmp4) {
HXLINE(  50)			Description = ::openfl::_legacy::Assets_obj::getText(Description);
            		}
HXLINE(  53)		HX_VARI(  ::Dynamic,data) =  ::haxe::format::JsonParser_obj::__new(Description)->parseRec();
HXLINE(  56)		Bool _hx_tmp5 = ::Std_obj::is( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)),hx::ArrayBase::__mClass);
HXDLIN(  56)		if (_hx_tmp5) {
HXLINE(  58)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  58)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::Lambda_obj::array( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)));
HXDLIN(  58)			while((_g < _g1->length)){
HXLINE(  58)				HX_VARI(  ::Dynamic,frame) = _g1->__get(_g);
HXDLIN(  58)				++_g;
HXLINE(  60)				::flixel::graphics::frames::FlxAtlasFrames_obj::texturePackerHelper( ::Dynamic(frame->__Field(HX_("filename",c7,2e,6a,77),hx::paccDynamic)),frame,frames);
            			}
            		}
            		else {
HXLINE(  66)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(  66)			HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)));
HXDLIN(  66)			while((_g2 < _g11->length)){
HXLINE(  66)				HX_VARI( ::String,frameName) = _g11->__get(_g2);
HXDLIN(  66)				++_g2;
HXLINE(  68)				 ::Dynamic _hx_tmp6 = ::Reflect_obj::field( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),hx::paccDynamic)),frameName);
HXDLIN(  68)				::flixel::graphics::frames::FlxAtlasFrames_obj::texturePackerHelper(frameName,_hx_tmp6,frames);
            			}
            		}
HXLINE(  72)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromTexturePackerJson,return )

void FlxAtlasFrames_obj::texturePackerHelper(::String FrameName, ::Dynamic FrameData, ::flixel::graphics::frames::FlxAtlasFrames Frames){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","texturePackerHelper",0x397d6e77,"flixel.graphics.frames.FlxAtlasFrames.texturePackerHelper","flixel/graphics/frames/FlxAtlasFrames.hx",82,0x501ecb67)
            	HX_STACK_ARG(FrameName,"FrameName")
            	HX_STACK_ARG(FrameData,"FrameData")
            	HX_STACK_ARG(Frames,"Frames")
HXLINE(  83)		HX_VARI( Bool,rotated) = ( (Bool)(FrameData->__Field(HX_("rotated",a9,49,1d,f1),hx::paccDynamic)) );
HXLINE(  85)		Float X = ( (Float)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),hx::paccDynamic))->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXDLIN(  85)		Float Y = ( (Float)( ::Dynamic(FrameData->__Field(HX_("sourceSize",3c,87,b7,74),hx::paccDynamic))->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXDLIN(  85)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN(  85)		point->_inPool = false;
HXLINE(  86)		Float X1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  86)		Float Y1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("spriteSourceSize",a1,7f,c1,03),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(  86)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN(  86)		point1->_inPool = false;
HXLINE(  87)		HX_VARI( Int,angle) = (int)0;
HXLINE(  88)		HX_VARI(  ::flixel::math::FlxRect,frameRect) = null();
HXLINE(  90)		if (rotated) {
HXLINE(  92)			Float X2 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)			Float Y2 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)			Float Width = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)			Float Height = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  92)			_this->x = X2;
HXDLIN(  92)			_this->y = Y2;
HXDLIN(  92)			_this->width = Width;
HXDLIN(  92)			_this->height = Height;
HXDLIN(  92)			_this->_inPool = false;
HXDLIN(  92)			frameRect = _this;
HXLINE(  93)			angle = (int)-90;
            		}
            		else {
HXLINE(  97)			Float X3 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  97)			Float Y3 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(  97)			Float Width1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("w",77,00,00,00),hx::paccDynamic)) );
HXDLIN(  97)			Float Height1 = ( (Float)( ::Dynamic(FrameData->__Field(HX_("frame",2d,78,83,06),hx::paccDynamic))->__Field(HX_("h",68,00,00,00),hx::paccDynamic)) );
HXDLIN(  97)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(  97)			_this1->x = X3;
HXDLIN(  97)			_this1->y = Y3;
HXDLIN(  97)			_this1->width = Width1;
HXDLIN(  97)			_this1->height = Height1;
HXDLIN(  97)			_this1->_inPool = false;
HXDLIN(  97)			frameRect = _this1;
            		}
HXLINE( 100)		Frames->addAtlasFrame(frameRect,point,point1,FrameName,angle,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxAtlasFrames_obj,texturePackerHelper,(void))

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromLibGdx( ::Dynamic Source,::String Description){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","fromLibGdx",0x5ef5c818,"flixel.graphics.frames.FlxAtlasFrames.fromLibGdx","flixel/graphics/frames/FlxAtlasFrames.hx",112,0x501ecb67)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Description,"Description")
HXLINE( 113)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE( 114)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 115)			return null();
            		}
HXLINE( 118)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,frames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 119)		Bool _hx_tmp1 = hx::IsNotNull( frames );
HXDLIN( 119)		if (_hx_tmp1) {
HXLINE( 120)			return frames;
            		}
HXLINE( 122)		Bool _hx_tmp2;
HXDLIN( 122)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN( 122)		if (_hx_tmp3) {
HXLINE( 122)			_hx_tmp2 = hx::IsNull( Description );
            		}
            		else {
HXLINE( 122)			_hx_tmp2 = true;
            		}
HXDLIN( 122)		if (_hx_tmp2) {
HXLINE( 123)			return null();
            		}
HXLINE( 125)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(graphic,null());
HXLINE( 127)		Bool _hx_tmp4 = ::openfl::_legacy::Assets_obj::exists(Description,null());
HXDLIN( 127)		if (_hx_tmp4) {
HXLINE( 128)			Description = ::openfl::_legacy::Assets_obj::getText(Description);
            		}
HXLINE( 130)		HX_VARI( ::String,pack) = ::StringTools_obj::trim(Description);
HXLINE( 131)		HX_VARI( ::Array< ::String >,lines) = pack.split(HX_("\n",0a,00,00,00));
HXLINE( 134)		HX_VAR( Int,repeatLine);
HXDLIN( 134)		Int _hx_tmp5 = lines->__get((int)3).indexOf(HX_("repeat:",7f,d8,87,a6),null());
HXDLIN( 134)		if ((_hx_tmp5 > (int)-1)) {
HXLINE( 134)			repeatLine = (int)3;
            		}
            		else {
HXLINE( 134)			repeatLine = (int)4;
            		}
HXLINE( 135)		lines->removeRange((int)0,(repeatLine + (int)1));
HXLINE( 138)		Float _hx_tmp6 = ((Float)lines->length / (Float)(int)7);
HXDLIN( 138)		HX_VARI( Int,numImages) = ::Std_obj::_hx_int(_hx_tmp6);
HXLINE( 139)		HX_VARI( ::Array< Int >,size) = ::Array_obj< Int >::__new(0);
HXLINE( 141)		{
HXLINE( 141)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 141)			while((_g1 < numImages)){
HXLINE( 141)				HX_VARI( Int,i) = _g1++;
HXLINE( 143)				HX_VARI( Int,curIndex) = (i * (int)7);
HXLINE( 145)				Int _hx_tmp7 = curIndex++;
HXDLIN( 145)				HX_VARI( ::String,name) = lines->__get(_hx_tmp7);
HXLINE( 146)				Int _hx_tmp8 = curIndex++;
HXDLIN( 146)				Int _hx_tmp9 = lines->__get(_hx_tmp8).indexOf(HX_("true",4e,a7,03,4d),null());
HXDLIN( 146)				HX_VARI( Bool,rotated) = (_hx_tmp9 >= (int)0);
HXLINE( 147)				HX_VARI( Int,angle) = (int)0;
HXLINE( 149)				Int _hx_tmp10 = curIndex++;
HXDLIN( 149)				HX_VARI( ::String,tempString) = lines->__get(_hx_tmp10);
HXLINE( 150)				HX_VARI_NAME( ::Array< Int >,size1,"size") = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString,size);
HXLINE( 152)				HX_VARI( Int,imageX) = size1->__get((int)0);
HXLINE( 153)				HX_VARI( Int,imageY) = size1->__get((int)1);
HXLINE( 155)				Int _hx_tmp11 = curIndex++;
HXDLIN( 155)				tempString = lines->__get(_hx_tmp11);
HXLINE( 156)				size1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString,size1);
HXLINE( 158)				HX_VARI( Int,imageWidth) = size1->__get((int)0);
HXLINE( 159)				HX_VARI( Int,imageHeight) = size1->__get((int)1);
HXLINE( 161)				HX_VARI(  ::flixel::math::FlxRect,rect) = null();
HXLINE( 162)				if (rotated) {
HXLINE( 164)					HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 164)					_this->x = imageX;
HXDLIN( 164)					_this->y = imageY;
HXDLIN( 164)					_this->width = imageHeight;
HXDLIN( 164)					_this->height = imageWidth;
HXDLIN( 164)					_this->_inPool = false;
HXDLIN( 164)					rect = _this;
HXLINE( 165)					angle = (int)90;
            				}
            				else {
HXLINE( 169)					HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 169)					_this1->x = imageX;
HXDLIN( 169)					_this1->y = imageY;
HXDLIN( 169)					_this1->width = imageWidth;
HXDLIN( 169)					_this1->height = imageHeight;
HXDLIN( 169)					_this1->_inPool = false;
HXDLIN( 169)					rect = _this1;
            				}
HXLINE( 172)				Int _hx_tmp12 = curIndex++;
HXDLIN( 172)				tempString = lines->__get(_hx_tmp12);
HXLINE( 173)				size1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString,size1);
HXLINE( 175)				 ::flixel::math::FlxPoint _hx_tmp13 = ::flixel::math::FlxPoint_obj::_pool->get();
HXDLIN( 175)				Int _hx_tmp14 = size1->__get((int)0);
HXDLIN( 175)				Int _hx_tmp15 = size1->__get((int)1);
HXDLIN( 175)				HX_VARI(  ::flixel::math::FlxPoint,point) = _hx_tmp13->set(_hx_tmp14,_hx_tmp15);
HXDLIN( 175)				point->_inPool = false;
HXLINE( 177)				Int _hx_tmp16 = curIndex++;
HXDLIN( 177)				tempString = lines->__get(_hx_tmp16);
HXLINE( 178)				size1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::getDimensions(tempString,size1);
HXLINE( 181)				Float Y = ((point->y - size1->__get((int)1)) - imageHeight);
HXDLIN( 181)				 ::flixel::math::FlxPoint _hx_tmp17 = ::flixel::math::FlxPoint_obj::_pool->get();
HXDLIN( 181)				Int _hx_tmp18 = size1->__get((int)0);
HXDLIN( 181)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = _hx_tmp17->set(_hx_tmp18,Y);
HXDLIN( 181)				point1->_inPool = false;
HXLINE( 182)				frames->addAtlasFrame(rect,point,point1,name,angle,null(),null());
            			}
            		}
HXLINE( 185)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromLibGdx,return )

::Array< Int > FlxAtlasFrames_obj::getDimensions(::String line,::Array< Int > size){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","getDimensions",0x0a6267eb,"flixel.graphics.frames.FlxAtlasFrames.getDimensions","flixel/graphics/frames/FlxAtlasFrames.hx",196,0x501ecb67)
            	HX_STACK_ARG(line,"line")
            	HX_STACK_ARG(size,"size")
HXLINE( 197)		HX_VARI( Int,colonPosition) = line.indexOf(HX_(":",3a,00,00,00),null());
HXLINE( 198)		HX_VARI( Int,comaPosition) = line.indexOf(HX_(",",2c,00,00,00),null());
HXLINE( 200)		::String _hx_tmp = line.substring((colonPosition + (int)1),comaPosition);
HXDLIN( 200)		 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(_hx_tmp);
HXDLIN( 200)		size[(int)0] = _hx_tmp1;
HXLINE( 201)		::String _hx_tmp2 = line.substring((comaPosition + (int)1),line.length);
HXDLIN( 201)		 ::Dynamic _hx_tmp3 = ::Std_obj::parseInt(_hx_tmp2);
HXDLIN( 201)		size[(int)1] = _hx_tmp3;
HXLINE( 203)		return size;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,getDimensions,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromSparrow( ::Dynamic Source,::String Description){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","fromSparrow",0x30bf432a,"flixel.graphics.frames.FlxAtlasFrames.fromSparrow","flixel/graphics/frames/FlxAtlasFrames.hx",215,0x501ecb67)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Description,"Description")
HXLINE( 216)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE( 217)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 218)			return null();
            		}
HXLINE( 221)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,frames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 222)		Bool _hx_tmp1 = hx::IsNotNull( frames );
HXDLIN( 222)		if (_hx_tmp1) {
HXLINE( 223)			return frames;
            		}
HXLINE( 225)		Bool _hx_tmp2;
HXDLIN( 225)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN( 225)		if (_hx_tmp3) {
HXLINE( 225)			_hx_tmp2 = hx::IsNull( Description );
            		}
            		else {
HXLINE( 225)			_hx_tmp2 = true;
            		}
HXDLIN( 225)		if (_hx_tmp2) {
HXLINE( 226)			return null();
            		}
HXLINE( 228)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(graphic,null());
HXLINE( 230)		Bool _hx_tmp4 = ::openfl::_legacy::Assets_obj::exists(Description,null());
HXDLIN( 230)		if (_hx_tmp4) {
HXLINE( 231)			Description = ::openfl::_legacy::Assets_obj::getText(Description);
            		}
HXLINE( 233)		 ::Xml _hx_tmp5 = ::Xml_obj::parse(Description)->firstElement();
HXDLIN( 233)		HX_VARI(  ::haxe::xml::Fast,data) =  ::haxe::xml::Fast_obj::__new(_hx_tmp5);
HXLINE( 235)		{
HXLINE( 235)			HX_VAR(  ::_List::ListNode,_g_head);
HXDLIN( 235)			 ::List _this = data->nodes->resolve(HX_("SubTexture",5b,7b,fb,11));
HXLINE( 214)			_g_head = _this->h;
HXLINE( 235)			while(true){
HXLINE( 235)				Bool _hx_tmp6 = !(hx::IsNotNull( _g_head ));
HXDLIN( 235)				if (_hx_tmp6) {
HXLINE( 235)					goto _hx_goto_4;
            				}
HXDLIN( 235)				HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXLINE( 214)				_g_head = _g_head->next;
HXLINE( 237)				HX_VARI( ::String,name) = val->att->resolve(HX_("name",4b,72,ff,48));
HXLINE( 238)				HX_VARI( Bool,trimmed) = val->has->resolve(HX_("frameX",8b,af,85,ac));
HXLINE( 239)				HX_VAR( Bool,rotated);
HXDLIN( 239)				Bool _hx_tmp7 = val->has->resolve(HX_("rotated",a9,49,1d,f1));
HXDLIN( 239)				if (_hx_tmp7) {
HXLINE( 239)					::String _hx_tmp8 = val->att->resolve(HX_("rotated",a9,49,1d,f1));
HXDLIN( 239)					rotated = (_hx_tmp8 == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 239)					rotated = false;
            				}
HXLINE( 240)				HX_VAR( Bool,flipX);
HXDLIN( 240)				Bool _hx_tmp9 = val->has->resolve(HX_("flipX",0b,45,92,02));
HXDLIN( 240)				if (_hx_tmp9) {
HXLINE( 240)					::String _hx_tmp10 = val->att->resolve(HX_("flipX",0b,45,92,02));
HXDLIN( 240)					flipX = (_hx_tmp10 == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 240)					flipX = false;
            				}
HXLINE( 241)				HX_VAR( Bool,flipY);
HXDLIN( 241)				Bool _hx_tmp11 = val->has->resolve(HX_("flipY",0c,45,92,02));
HXDLIN( 241)				if (_hx_tmp11) {
HXLINE( 241)					::String _hx_tmp12 = val->att->resolve(HX_("flipY",0c,45,92,02));
HXDLIN( 241)					flipY = (_hx_tmp12 == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 241)					flipY = false;
            				}
HXLINE( 243)				::String _hx_tmp13 = val->att->resolve(HX_("x",78,00,00,00));
HXDLIN( 243)				Float X = ::Std_obj::parseFloat(_hx_tmp13);
HXDLIN( 243)				::String _hx_tmp14 = val->att->resolve(HX_("y",79,00,00,00));
HXDLIN( 243)				Float Y = ::Std_obj::parseFloat(_hx_tmp14);
HXDLIN( 243)				::String _hx_tmp15 = val->att->resolve(HX_("width",06,b6,62,ca));
HXDLIN( 243)				Float Width = ::Std_obj::parseFloat(_hx_tmp15);
HXDLIN( 243)				::String _hx_tmp16 = val->att->resolve(HX_("height",e7,07,4c,02));
HXDLIN( 243)				Float Height = ::Std_obj::parseFloat(_hx_tmp16);
HXDLIN( 243)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 243)				_this1->x = X;
HXDLIN( 243)				_this1->y = Y;
HXDLIN( 243)				_this1->width = Width;
HXDLIN( 243)				_this1->height = Height;
HXDLIN( 243)				_this1->_inPool = false;
HXLINE( 245)				HX_VAR(  ::openfl::_legacy::geom::Rectangle,size);
HXDLIN( 245)				if (trimmed) {
HXLINE( 247)					::String _hx_tmp17 = val->att->resolve(HX_("frameX",8b,af,85,ac));
HXDLIN( 247)					 ::Dynamic _hx_tmp18 = ::Std_obj::parseInt(_hx_tmp17);
HXDLIN( 247)					::String _hx_tmp19 = val->att->resolve(HX_("frameY",8c,af,85,ac));
HXDLIN( 247)					 ::Dynamic _hx_tmp20 = ::Std_obj::parseInt(_hx_tmp19);
HXDLIN( 247)					::String _hx_tmp21 = val->att->resolve(HX_("frameWidth",99,ea,88,ad));
HXDLIN( 247)					 ::Dynamic _hx_tmp22 = ::Std_obj::parseInt(_hx_tmp21);
HXDLIN( 247)					::String _hx_tmp23 = val->att->resolve(HX_("frameHeight",f4,d3,93,e0));
HXDLIN( 247)					 ::Dynamic _hx_tmp24 = ::Std_obj::parseInt(_hx_tmp23);
HXLINE( 245)					size =  ::openfl::_legacy::geom::Rectangle_obj::__new(_hx_tmp18,_hx_tmp20,_hx_tmp22,_hx_tmp24);
            				}
            				else {
HXLINE( 245)					size =  ::openfl::_legacy::geom::Rectangle_obj::__new((int)0,(int)0,_this1->width,_this1->height);
            				}
HXLINE( 254)				HX_VAR( Int,angle);
HXDLIN( 254)				if (rotated) {
HXLINE( 254)					angle = (int)-90;
            				}
            				else {
HXLINE( 254)					angle = (int)0;
            				}
HXLINE( 256)				Float X1 = -(size->get_left());
HXDLIN( 256)				Float Y1 = -(size->get_top());
HXDLIN( 256)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 256)				point->_inPool = false;
HXLINE( 257)				Float X2 = size->width;
HXDLIN( 257)				Float Y2 = size->height;
HXDLIN( 257)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X2,Y2);
HXDLIN( 257)				point1->_inPool = false;
HXLINE( 259)				Bool _hx_tmp25;
HXDLIN( 259)				if (rotated) {
HXLINE( 259)					_hx_tmp25 = !(trimmed);
            				}
            				else {
HXLINE( 259)					_hx_tmp25 = false;
            				}
HXDLIN( 259)				if (_hx_tmp25) {
HXLINE( 260)					point1->set(size->height,size->width);
            				}
HXLINE( 262)				frames->addAtlasFrame(_this1,point1,point,name,angle,flipX,flipY);
            			}
            			_hx_goto_4:;
            		}
HXLINE( 265)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromSparrow,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromTexturePackerXml( ::Dynamic Source,::String Description){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","fromTexturePackerXml",0x5ca98eb8,"flixel.graphics.frames.FlxAtlasFrames.fromTexturePackerXml","flixel/graphics/frames/FlxAtlasFrames.hx",277,0x501ecb67)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Description,"Description")
HXLINE( 278)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(Source,false,null());
HXLINE( 279)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN( 279)		if (_hx_tmp) {
HXLINE( 279)			return null();
            		}
HXLINE( 282)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,frames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 283)		Bool _hx_tmp1 = hx::IsNotNull( frames );
HXDLIN( 283)		if (_hx_tmp1) {
HXLINE( 284)			return frames;
            		}
HXLINE( 286)		Bool _hx_tmp2;
HXDLIN( 286)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN( 286)		if (_hx_tmp3) {
HXLINE( 286)			_hx_tmp2 = hx::IsNull( Description );
            		}
            		else {
HXLINE( 286)			_hx_tmp2 = true;
            		}
HXDLIN( 286)		if (_hx_tmp2) {
HXLINE( 287)			return null();
            		}
HXLINE( 289)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(graphic,null());
HXLINE( 291)		Bool _hx_tmp4 = ::openfl::_legacy::Assets_obj::exists(Description,null());
HXDLIN( 291)		if (_hx_tmp4) {
HXLINE( 292)			Description = ::openfl::_legacy::Assets_obj::getText(Description);
            		}
HXLINE( 294)		HX_VARI(  ::Xml,xml) = ::Xml_obj::parse(Description);
HXLINE( 296)		{
HXLINE( 296)			HX_VARI(  ::Dynamic,tmp) = xml->firstElement()->elements();
HXDLIN( 296)			while(true){
HXLINE( 296)				Bool _hx_tmp5 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 296)				if (_hx_tmp5) {
HXLINE( 296)					goto _hx_goto_5;
            				}
HXDLIN( 296)				HX_VARI(  ::Xml,sprite) = ( ( ::Xml)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 298)				HX_VAR( Bool,trimmed);
HXDLIN( 298)				Bool _hx_tmp6 = !(sprite->exists(HX_("oX",09,61,00,00)));
HXDLIN( 298)				if (_hx_tmp6) {
HXLINE( 298)					trimmed = sprite->exists(HX_("oY",0a,61,00,00));
            				}
            				else {
HXLINE( 298)					trimmed = true;
            				}
HXLINE( 299)				HX_VAR( Bool,rotated);
HXDLIN( 299)				Bool _hx_tmp7 = sprite->exists(HX_("r",72,00,00,00));
HXDLIN( 299)				if (_hx_tmp7) {
HXLINE( 299)					::String _hx_tmp8 = sprite->get(HX_("r",72,00,00,00));
HXDLIN( 299)					rotated = (_hx_tmp8 == HX_("y",79,00,00,00));
            				}
            				else {
HXLINE( 299)					rotated = false;
            				}
HXLINE( 300)				HX_VAR( Int,angle);
HXDLIN( 300)				if (rotated) {
HXLINE( 300)					angle = (int)-90;
            				}
            				else {
HXLINE( 300)					angle = (int)0;
            				}
HXLINE( 301)				HX_VARI( ::String,name) = sprite->get(HX_("n",6e,00,00,00));
HXLINE( 302)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 302)				point->_inPool = false;
HXLINE( 303)				::String _hx_tmp9 = sprite->get(HX_("x",78,00,00,00));
HXDLIN( 303)				Float X = ::Std_obj::parseInt(_hx_tmp9);
HXDLIN( 303)				::String _hx_tmp10 = sprite->get(HX_("y",79,00,00,00));
HXDLIN( 303)				Float Y = ::Std_obj::parseInt(_hx_tmp10);
HXDLIN( 303)				::String _hx_tmp11 = sprite->get(HX_("w",77,00,00,00));
HXDLIN( 303)				Float Width = ::Std_obj::parseInt(_hx_tmp11);
HXDLIN( 303)				::String _hx_tmp12 = sprite->get(HX_("h",68,00,00,00));
HXDLIN( 303)				Float Height = ::Std_obj::parseInt(_hx_tmp12);
HXDLIN( 303)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 303)				_this->x = X;
HXDLIN( 303)				_this->y = Y;
HXDLIN( 303)				_this->width = Width;
HXDLIN( 303)				_this->height = Height;
HXDLIN( 303)				_this->_inPool = false;
HXLINE( 304)				Float X1 = _this->width;
HXDLIN( 304)				Float Y1 = _this->height;
HXDLIN( 304)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 304)				point1->_inPool = false;
HXLINE( 306)				if (trimmed) {
HXLINE( 308)					::String _hx_tmp13 = sprite->get(HX_("oX",09,61,00,00));
HXDLIN( 308)					 ::Dynamic _hx_tmp14 = ::Std_obj::parseInt(_hx_tmp13);
HXDLIN( 308)					::String _hx_tmp15 = sprite->get(HX_("oY",0a,61,00,00));
HXDLIN( 308)					 ::Dynamic _hx_tmp16 = ::Std_obj::parseInt(_hx_tmp15);
HXDLIN( 308)					point->set(_hx_tmp14,_hx_tmp16);
HXLINE( 309)					::String _hx_tmp17 = sprite->get(HX_("oW",08,61,00,00));
HXDLIN( 309)					 ::Dynamic _hx_tmp18 = ::Std_obj::parseInt(_hx_tmp17);
HXDLIN( 309)					::String _hx_tmp19 = sprite->get(HX_("oH",f9,60,00,00));
HXDLIN( 309)					 ::Dynamic _hx_tmp20 = ::Std_obj::parseInt(_hx_tmp19);
HXDLIN( 309)					point1->set(_hx_tmp18,_hx_tmp20);
            				}
HXLINE( 312)				frames->addAtlasFrame(_this,point1,point,name,angle,null(),null());
            			}
            			_hx_goto_5:;
            		}
HXLINE( 315)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromTexturePackerXml,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::fromSpriteSheetPacker( ::Dynamic Source,::String Description){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","fromSpriteSheetPacker",0x4fb8a81e,"flixel.graphics.frames.FlxAtlasFrames.fromSpriteSheetPacker","flixel/graphics/frames/FlxAtlasFrames.hx",327,0x501ecb67)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Description,"Description")
HXLINE( 328)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(Source,null(),null());
HXLINE( 329)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 330)			return null();
            		}
HXLINE( 333)		HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,frames) = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 334)		Bool _hx_tmp1 = hx::IsNotNull( frames );
HXDLIN( 334)		if (_hx_tmp1) {
HXLINE( 335)			return frames;
            		}
HXLINE( 337)		Bool _hx_tmp2;
HXDLIN( 337)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN( 337)		if (_hx_tmp3) {
HXLINE( 337)			_hx_tmp2 = hx::IsNull( Description );
            		}
            		else {
HXLINE( 337)			_hx_tmp2 = true;
            		}
HXDLIN( 337)		if (_hx_tmp2) {
HXLINE( 338)			return null();
            		}
HXLINE( 340)		frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__new(graphic,null());
HXLINE( 342)		Bool _hx_tmp4 = ::openfl::_legacy::Assets_obj::exists(Description,null());
HXDLIN( 342)		if (_hx_tmp4) {
HXLINE( 343)			Description = ::openfl::_legacy::Assets_obj::getText(Description);
            		}
HXLINE( 345)		HX_VARI( ::String,pack) = ::StringTools_obj::trim(Description);
HXLINE( 346)		HX_VARI( ::Array< ::String >,lines) = pack.split(HX_("\n",0a,00,00,00));
HXLINE( 348)		{
HXLINE( 348)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 348)			HX_VARI( Int,_g) = lines->length;
HXDLIN( 348)			while((_g1 < _g)){
HXLINE( 348)				HX_VARI( Int,i) = _g1++;
HXLINE( 350)				HX_VARI( ::Array< ::String >,currImageData) = lines->__get(i).split(HX_("=",3d,00,00,00));
HXLINE( 351)				::String _hx_tmp5 = currImageData->__get((int)0);
HXDLIN( 351)				HX_VARI( ::String,name) = ::StringTools_obj::trim(_hx_tmp5);
HXLINE( 352)				::String _hx_tmp6 = currImageData->__get((int)1);
HXDLIN( 352)				HX_VARI( ::Array< ::String >,currImageRegion) = ::StringTools_obj::trim(_hx_tmp6).split(HX_(" ",20,00,00,00));
HXLINE( 354)				::String _hx_tmp7 = currImageRegion->__get((int)0);
HXDLIN( 354)				Float X = ::Std_obj::parseInt(_hx_tmp7);
HXDLIN( 354)				::String _hx_tmp8 = currImageRegion->__get((int)1);
HXDLIN( 354)				Float Y = ::Std_obj::parseInt(_hx_tmp8);
HXDLIN( 354)				::String _hx_tmp9 = currImageRegion->__get((int)2);
HXDLIN( 354)				Float Width = ::Std_obj::parseInt(_hx_tmp9);
HXDLIN( 354)				::String _hx_tmp10 = currImageRegion->__get((int)3);
HXDLIN( 354)				Float Height = ::Std_obj::parseInt(_hx_tmp10);
HXDLIN( 354)				HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 354)				_this->x = X;
HXDLIN( 354)				_this->y = Y;
HXDLIN( 354)				_this->width = Width;
HXDLIN( 354)				_this->height = Height;
HXDLIN( 354)				_this->_inPool = false;
HXLINE( 355)				Float X1 = _this->width;
HXDLIN( 355)				Float Y1 = _this->height;
HXDLIN( 355)				HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,Y1);
HXDLIN( 355)				point->_inPool = false;
HXLINE( 356)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 356)				point1->_inPool = false;
HXLINE( 358)				frames->addAtlasFrame(_this,point,point1,name,(int)0,null(),null());
            			}
            		}
HXLINE( 361)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,fromSpriteSheetPacker,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAtlasFrames_obj::findFrame( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxAtlasFrames","findFrame",0xf36e229c,"flixel.graphics.frames.FlxAtlasFrames.findFrame","flixel/graphics/frames/FlxAtlasFrames.hx",371,0x501ecb67)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(border,"border")
HXLINE( 372)		Bool _hx_tmp = hx::IsNull( border );
HXDLIN( 372)		if (_hx_tmp) {
HXLINE( 373)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 373)			point->_inPool = false;
HXDLIN( 373)			point->_weak = true;
HXDLIN( 373)			border = point;
            		}
HXLINE( 375)		HX_VARI( ::hx::EnumBase,type) = ::flixel::graphics::frames::FlxFrameCollectionType_obj::ATLAS_dyn();
HXDLIN( 375)		HX_VARI( ::cpp::VirtualArray,collections) = ( (::cpp::VirtualArray)(graphic->frameCollections->get(type)) );
HXDLIN( 375)		Bool _hx_tmp1 = hx::IsNull( collections );
HXDLIN( 375)		if (_hx_tmp1) {
HXLINE( 375)			collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 375)			graphic->frameCollections->set(type,collections);
            		}
HXDLIN( 375)		HX_VARI( ::Array< ::Dynamic>,atlasFrames) = collections;
HXLINE( 377)		{
HXLINE( 377)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 377)			while((_g < atlasFrames->length)){
HXLINE( 377)				HX_VARI(  ::flixel::graphics::frames::FlxAtlasFrames,atlas) = atlasFrames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxAtlasFrames >();
HXDLIN( 377)				++_g;
HXLINE( 378)				HX_VARI(  ::flixel::math::FlxPoint,_this) = atlas->border;
HXDLIN( 378)				HX_VAR( Bool,result);
HXDLIN( 378)				Float aValueA = _this->x;
HXDLIN( 378)				Float aValueB = border->x;
HXDLIN( 378)				Float _hx_tmp2 = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 378)				if ((_hx_tmp2 <= ((Float)0.0000001))) {
HXLINE( 378)					Float aValueA1 = _this->y;
HXDLIN( 378)					Float aValueB1 = border->y;
HXDLIN( 378)					Float _hx_tmp3 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 378)					result = (_hx_tmp3 <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 378)					result = false;
            				}
HXDLIN( 378)				Bool _hx_tmp4 = border->_weak;
HXDLIN( 378)				if (_hx_tmp4) {
HXLINE( 378)					border->put();
            				}
HXDLIN( 378)				if (result) {
HXLINE( 379)					return atlas;
            				}
            			}
            		}
HXLINE( 381)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAtlasFrames_obj,findFrame,return )


FlxAtlasFrames_obj::FlxAtlasFrames_obj()
{
}

hx::Val FlxAtlasFrames_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"addBorder") ) { return hx::Val( addBorder_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxAtlasFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"findFrame") ) { outValue = findFrame_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromLibGdx") ) { outValue = fromLibGdx_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromSparrow") ) { outValue = fromSparrow_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getDimensions") ) { outValue = getDimensions_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"texturePackerHelper") ) { outValue = texturePackerHelper_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fromTexturePackerXml") ) { outValue = fromTexturePackerXml_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"fromTexturePackerJson") ) { outValue = fromTexturePackerJson_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromSpriteSheetPacker") ) { outValue = fromSpriteSheetPacker_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxAtlasFrames_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxAtlasFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAtlasFrames_obj_sMemberFields[] = {
	HX_HCSTRING("addBorder","\xed","\x81","\x3e","\x1c"),
	::String(null()) };

static void FlxAtlasFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxAtlasFrames_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxAtlasFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxAtlasFrames_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxAtlasFrames_obj::__mClass;

static ::String FlxAtlasFrames_obj_sStaticFields[] = {
	HX_HCSTRING("fromTexturePackerJson","\xbf","\xf0","\x7e","\xbe"),
	HX_HCSTRING("texturePackerHelper","\x0f","\x23","\xbd","\xb2"),
	HX_HCSTRING("fromLibGdx","\x80","\x06","\xdf","\x27"),
	HX_HCSTRING("getDimensions","\x83","\x1a","\x12","\x39"),
	HX_HCSTRING("fromSparrow","\xc2","\x9f","\xec","\x33"),
	HX_HCSTRING("fromTexturePackerXml","\x20","\xdf","\x27","\xfb"),
	HX_HCSTRING("fromSpriteSheetPacker","\xb6","\xb2","\xc0","\x5f"),
	HX_HCSTRING("findFrame","\x34","\xa9","\x7a","\xf5"),
	::String(null())
};

void FlxAtlasFrames_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxAtlasFrames","\xd6","\x87","\xd5","\x6f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAtlasFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxAtlasFrames_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxAtlasFrames_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxAtlasFrames_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxAtlasFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxAtlasFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAtlasFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAtlasFrames_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
