// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Pickup
#include <Pickup.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif


void Pickup_obj::__construct(Float X,Float Y){
            	HX_STACK_FRAME("Pickup","new",0x7fa21c8e,"Pickup.new","Pickup.hx",11,0xe62b2ea2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  12)		super::__construct(X,Y,null());
HXLINE(  14)		this->set_width((int)16);
HXLINE(  15)		this->set_height((int)16);
HXLINE(  17)		this->loadGraphic(HX_("assets/images/crate.png",73,f6,e1,1c),false,(int)16,(int)16,null(),null());
            	}

Dynamic Pickup_obj::__CreateEmpty() { return new Pickup_obj; }

hx::ObjectPtr< Pickup_obj > Pickup_obj::__new(Float X,Float Y)
{
	hx::ObjectPtr< Pickup_obj > _hx_result = new Pickup_obj();
	_hx_result->__construct(X,Y);
	return _hx_result;
}

Dynamic Pickup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pickup_obj > _hx_result = new Pickup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

Bool Pickup_obj::isCollided( ::Player newPlayer){
            	HX_STACK_FRAME("Pickup","isCollided",0xabe8a6c2,"Pickup.isCollided","Pickup.hx",22,0xe62b2ea2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newPlayer,"newPlayer")
HXLINE(  22)		Bool _hx_tmp = ::flixel::FlxG_obj::overlap(newPlayer,hx::ObjectPtr<OBJ_>(this),null(),::flixel::FlxObject_obj::separate_dyn());
HXDLIN(  22)		if (_hx_tmp) {
HXLINE(  24)			return true;
            		}
            		else {
HXLINE(  28)			return false;
            		}
HXLINE(  22)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pickup_obj,isCollided,return )


Pickup_obj::Pickup_obj()
{
}

hx::Val Pickup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"isCollided") ) { return hx::Val( isCollided_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Pickup_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Pickup_obj_sStaticStorageInfo = 0;
#endif

static ::String Pickup_obj_sMemberFields[] = {
	HX_HCSTRING("isCollided","\x30","\xf1","\x84","\x44"),
	::String(null()) };

static void Pickup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pickup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pickup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pickup_obj::__mClass,"__mClass");
};

#endif

hx::Class Pickup_obj::__mClass;

void Pickup_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Pickup","\x9c","\x7d","\x61","\xb3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Pickup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Pickup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Pickup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pickup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pickup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pickup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

