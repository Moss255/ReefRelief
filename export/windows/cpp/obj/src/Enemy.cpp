// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif


void Enemy_obj::__construct(Float X,Float Y){
            	HX_STACK_FRAME("Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",12,0xbda88996)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE(  13)		super::__construct(X,Y,null());
HXLINE(  15)		this->loadGraphic(HX_("assets/images/urchin.png",cd,76,e9,74),null(),null(),null(),null(),null());
HXLINE(  17)		{
HXLINE(  17)			HX_VARI(  ::Enemy,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  17)			Float _hx_tmp = _g->get_width();
HXDLIN(  17)			_g->set_width((_hx_tmp * ((Float)0.75)));
            		}
HXLINE(  18)		{
HXLINE(  18)			HX_VARI_NAME(  ::Enemy,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  18)			Float _hx_tmp1 = _g1->get_height();
HXDLIN(  18)			_g1->set_height((_hx_tmp1 * ((Float)0.75)));
            		}
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

hx::ObjectPtr< Enemy_obj > Enemy_obj::__new(Float X,Float Y)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(X,Y);
	return _hx_result;
}

Dynamic Enemy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void Enemy_obj::attack( ::Player _player){
            	HX_STACK_FRAME("Enemy","attack",0x2818e54e,"Enemy.attack","Enemy.hx",24,0xbda88996)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_player,"_player")
HXLINE(  24)		Bool _hx_tmp = ::flixel::FlxG_obj::overlap(_player,hx::ObjectPtr<OBJ_>(this),null(),::flixel::FlxObject_obj::separate_dyn());
HXDLIN(  24)		if (_hx_tmp) {
HXLINE(  26)			_player->setLives((int)1);
HXLINE(  27)			_player->set_x((int)330);
HXLINE(  28)			_player->set_y((int)60);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,attack,(void))

void Enemy_obj::update(Float elapsed){
            	HX_STACK_FRAME("Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",34,0xbda88996)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  34)		this->super::update(elapsed);
            	}



Enemy_obj::Enemy_obj()
{
}

hx::Val Enemy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"attack") ) { return hx::Val( attack_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Enemy_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_HCSTRING("attack","\xc8","\xfb","\x0f","\xe0"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#endif

hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

