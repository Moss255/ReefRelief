// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)65,(Int)37,
};
static const Int _hx_array_data_1[] = {
	(Int)68,(Int)39,
};
static const Int _hx_array_data_2[] = {
	(Int)87,(Int)38,
};
static const Int _hx_array_data_3[] = {
	(Int)83,(Int)40,
};

void Player_obj::__construct(){
            	HX_STACK_FRAME("Player","new",0x8d5554f3,"Player.new","Player.hx",10,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE(  12)		this->lives = (int)5;
HXLINE(  16)		Float _hx_tmp = (((Float)::flixel::FlxG_obj::width / (Float)(int)2) - (int)8);
HXDLIN(  16)		Int _hx_tmp1 = ::Math_obj::floor(_hx_tmp);
HXDLIN(  16)		Float _hx_tmp2 = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)8);
HXDLIN(  16)		Int _hx_tmp3 = ::Math_obj::floor(_hx_tmp2);
HXDLIN(  16)		super::__construct(_hx_tmp1,_hx_tmp3,null());
HXLINE(  18)		this->loadGraphic(HX_("assets/images/sub.png",70,6a,d5,f3),null(),null(),null(),null(),null());
HXLINE(  20)		{
HXLINE(  20)			HX_VARI(  ::Player,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  20)			Float _hx_tmp4 = _g->get_width();
HXDLIN(  20)			_g->set_width((_hx_tmp4 * ((Float)0.75)));
            		}
HXLINE(  21)		{
HXLINE(  21)			HX_VARI_NAME(  ::Player,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  21)			Float _hx_tmp5 = _g1->get_height();
HXDLIN(  21)			_g1->set_height((_hx_tmp5 * ((Float)0.75)));
            		}
HXLINE(  22)		this->set_x((int)330);
HXLINE(  23)		this->set_y((int)60);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

hx::ObjectPtr< Player_obj > Player_obj::__new()
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Player_obj::getLives(){
            	HX_STACK_FRAME("Player","getLives",0x6655061e,"Player.getLives","Player.hx",28,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE(  28)		return this->lives;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getLives,return )

void Player_obj::setLives(Int newLives){
            	HX_STACK_FRAME("Player","setLives",0x14b25f92,"Player.setLives","Player.hx",33,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newLives,"newLives")
HXLINE(  33)		hx::SubEq(this->lives,newLives);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setLives,(void))

 ::flixel::math::FlxPoint Player_obj::getPos(){
            	HX_STACK_FRAME("Player","getPos",0x0e17efeb,"Player.getPos","Player.hx",38,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE(  38)		return  ::flixel::math::FlxPoint_obj::__new(this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getPos,return )

void Player_obj::update(Float elapsed){
            	HX_STACK_FRAME("Player","update",0xf1f8df56,"Player.update","Player.hx",42,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  43)		this->angularVelocity = (int)0;
HXLINE(  44)		HX_VARI( Float,speed) = (int)0;
HXLINE(  46)		Bool _hx_tmp = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_0,2),(int)1);
HXDLIN(  46)		if (_hx_tmp) {
HXLINE(  48)			hx::SubEq(this->angularVelocity,(int)240);
            		}
HXLINE(  51)		Bool _hx_tmp1 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_1,2),(int)1);
HXDLIN(  51)		if (_hx_tmp1) {
HXLINE(  53)			hx::AddEq(this->angularVelocity,(int)240);
            		}
HXLINE(  56)		Bool _hx_tmp2 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_2,2),(int)1);
HXDLIN(  56)		if (_hx_tmp2) {
HXLINE(  58)			hx::AddEq(speed,(int)60);
HXLINE(  59)			this->velocity->set(speed,(int)0);
HXLINE(  60)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  60)			point->_inPool = false;
HXDLIN(  60)			point->_weak = true;
HXDLIN(  60)			this->velocity->rotate(point,this->angle);
            		}
HXLINE(  64)		Bool _hx_tmp3 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_3,2),(int)1);
HXDLIN(  64)		if (_hx_tmp3) {
HXLINE(  66)			speed = (int)0;
HXLINE(  67)			this->velocity->set(speed,(int)0);
HXLINE(  68)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  68)			point1->_inPool = false;
HXDLIN(  68)			point1->_weak = true;
HXDLIN(  68)			this->velocity->rotate(point1,this->angle);
            		}
HXLINE(  71)		this->super::update(elapsed);
            	}



Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lives") ) { return hx::Val( lives); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return hx::Val( getPos_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getLives") ) { return hx::Val( getLives_dyn()); }
		if (HX_FIELD_EQ(inName,"setLives") ) { return hx::Val( setLives_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lives") ) { lives=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lives","\x07","\xf0","\x07","\x75"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Player_obj,lives),HX_HCSTRING("lives","\x07","\xf0","\x07","\x75")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("lives","\x07","\xf0","\x07","\x75"),
	HX_HCSTRING("getLives","\x91","\xff","\xde","\xd4"),
	HX_HCSTRING("setLives","\x05","\x59","\x3c","\x83"),
	HX_HCSTRING("getPos","\x9e","\x96","\x24","\xa3"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

