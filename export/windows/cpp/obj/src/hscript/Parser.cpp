// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_hscript_Token
#include <haxe/ds/GenericCell_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_hscript_Token
#include <haxe/ds/GenericStack_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_StringInput
#include <haxe/io/StringInput.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_Token
#include <hscript/Token.h>
#endif

static const ::String _hx_array_data_3[] = {
	HX_("%",25,00,00,00),
};
static const ::String _hx_array_data_4[] = {
	HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_5[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_6[] = {
	HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),
};
static const ::String _hx_array_data_7[] = {
	HX_("|",7c,00,00,00),HX_("&",26,00,00,00),HX_("^",5e,00,00,00),
};
static const ::String _hx_array_data_8[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),
};
static const ::String _hx_array_data_9[] = {
	HX_("...",ee,0f,23,00),
};
static const ::String _hx_array_data_10[] = {
	HX_("&&",40,21,00,00),
};
static const ::String _hx_array_data_11[] = {
	HX_("||",80,6c,00,00),
};
static const ::String _hx_array_data_12[] = {
	HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),
};
static const ::String _hx_array_data_13[] = {
	HX_("!",21,00,00,00),HX_("++",a0,25,00,00),HX_("--",60,27,00,00),HX_("-",2d,00,00,00),HX_("~",7e,00,00,00),
};
namespace hscript{

void Parser_obj::__construct(){
            	HX_STACK_FRAME("hscript.Parser","new",0x4b9f158c,"hscript.Parser.new","hscript/Parser.hx",46,0x98735743)
            	HX_STACK_THIS(this)
HXLINE(  77)		this->uid = (int)0;
HXLINE( 101)		this->line = (int)1;
HXLINE( 102)		this->opChars = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
HXLINE( 103)		this->identChars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
HXLINE( 104)		HX_VARI( ::Array< ::Dynamic>,priorities) = ::Array_obj< ::Dynamic>::__new(10)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_3,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_4,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_5,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_6,3))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_7,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_8,6))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_9,1))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_10,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_11,1))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_12,12));
HXLINE( 117)		this->opPriority =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 118)		this->opRightAssoc =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 119)		this->unops =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 125)		{
HXLINE( 125)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 125)			HX_VARI( Int,_g) = priorities->length;
HXDLIN( 125)			while((_g1 < _g)){
HXLINE( 125)				HX_VARI( Int,i) = _g1++;
HXLINE( 126)				{
HXLINE( 126)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 126)					HX_VARI( ::Array< ::String >,_g3) = priorities->__get(i).StaticCast< ::Array< ::String > >();
HXDLIN( 126)					while((_g2 < _g3->length)){
HXLINE( 126)						HX_VARI( ::String,x) = _g3->__get(_g2);
HXDLIN( 126)						++_g2;
HXLINE( 127)						this->opPriority->set(x,i);
HXLINE( 128)						if ((i == (int)9)) {
HXLINE( 128)							this->opRightAssoc->set(x,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 130)		{
HXLINE( 130)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 130)			HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::Array_obj< ::String >::fromData( _hx_array_data_13,5);
HXDLIN( 130)			while((_g4 < _g11->length)){
HXLINE( 130)				HX_VARI_NAME( ::String,x1,"x") = _g11->__get(_g4);
HXDLIN( 130)				++_g4;
HXLINE( 131)				Bool _hx_tmp;
HXDLIN( 131)				if ((x1 != HX_("++",a0,25,00,00))) {
HXLINE( 131)					_hx_tmp = (x1 == HX_("--",60,27,00,00));
            				}
            				else {
HXLINE( 131)					_hx_tmp = true;
            				}
HXDLIN( 131)				this->unops->set(x1,_hx_tmp);
            			}
            		}
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

hx::ObjectPtr< Parser_obj > Parser_obj::__new()
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Parser_obj::error(::hx::EnumBase err,Int pmin,Int pmax){
            	HX_STACK_FRAME("hscript.Parser","error",0x9bb1b3f4,"hscript.Parser.error","hscript/Parser.hx",138,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(err,"err")
            	HX_STACK_ARG(pmin,"pmin")
            	HX_STACK_ARG(pmax,"pmax")
HXLINE( 138)		HX_STACK_DO_THROW(err);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,error,(void))

void Parser_obj::invalidChar(Int c){
            	HX_STACK_FRAME("hscript.Parser","invalidChar",0x0ae4fe99,"hscript.Parser.invalidChar","hscript/Parser.hx",143,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 143)		::hx::EnumBase err = ::hscript::Error_obj::EInvalidChar(c);
HXDLIN( 143)		HX_STACK_DO_THROW(err);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,invalidChar,(void))

::hx::EnumBase Parser_obj::parseString(::String s){
            	HX_STACK_FRAME("hscript.Parser","parseString",0xed832690,"hscript.Parser.parseString","hscript/Parser.hx",146,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 147)		this->line = (int)1;
HXLINE( 148)		this->uid = (int)0;
HXLINE( 149)		return this->parse( ::haxe::io::StringInput_obj::__new(s));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseString,return )

::hx::EnumBase Parser_obj::parse( ::haxe::io::Input s){
            	HX_STACK_FRAME("hscript.Parser","parse",0xe5dd785f,"hscript.Parser.parse","hscript/Parser.hx",152,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 159)		this->tokens =  ::haxe::ds::GenericStack_hscript_Token_obj::__new();
HXLINE( 163)		this->_hx_char = (int)-1;
HXLINE( 164)		this->input = s;
HXLINE( 165)		this->ops = ::Array_obj< Bool >::__new();
HXLINE( 166)		this->idents = ::Array_obj< Bool >::__new();
HXLINE( 167)		{
HXLINE( 167)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 167)			HX_VARI( Int,_g) = this->opChars.length;
HXDLIN( 167)			while((_g1 < _g)){
HXLINE( 167)				HX_VARI( Int,i) = _g1++;
HXLINE( 168)				 ::Dynamic _hx_tmp = this->opChars.charCodeAt(i);
HXDLIN( 168)				this->ops[_hx_tmp] = true;
            			}
            		}
HXLINE( 169)		{
HXLINE( 169)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 169)			HX_VARI_NAME( Int,_g2,"_g") = this->identChars.length;
HXDLIN( 169)			while((_g11 < _g2)){
HXLINE( 169)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 170)				 ::Dynamic _hx_tmp1 = this->identChars.charCodeAt(i1);
HXDLIN( 170)				this->idents[_hx_tmp1] = true;
            			}
            		}
HXLINE( 171)		HX_VARI( ::Array< ::Dynamic>,a) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 172)		while(true){
HXLINE( 173)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 174)			if (hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE( 174)				goto _hx_goto_16;
            			}
HXLINE( 175)			{
HXLINE( 175)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 175)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            			}
HXLINE( 176)			::hx::EnumBase _hx_tmp2 = this->parseFullExpr();
HXDLIN( 176)			a->push(_hx_tmp2);
            		}
            		_hx_goto_16:;
HXLINE( 178)		Bool _hx_tmp3 = (a->length == (int)1);
HXDLIN( 178)		if (_hx_tmp3) {
HXLINE( 178)			return a->__get((int)0).StaticCast< ::hx::EnumBase >();
            		}
            		else {
HXLINE( 178)			::hx::EnumBase e = ::hscript::Expr_obj::EBlock(a);
HXDLIN( 178)			return e;
            		}
HXDLIN( 178)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parse,return )

 ::Dynamic Parser_obj::unexpected(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","unexpected",0xb7770e25,"hscript.Parser.unexpected","hscript/Parser.hx",181,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 182)		::String _hx_tmp = this->tokenString(tk);
HXDLIN( 182)		::hx::EnumBase err = ::hscript::Error_obj::EUnexpected(_hx_tmp);
HXDLIN( 182)		HX_STACK_DO_THROW(err);
HXDLIN( 182)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,unexpected,return )

void Parser_obj::push(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","push",0xe0f2532e,"hscript.Parser.push","hscript/Parser.hx",192,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 192)		HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 192)		_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,push,(void))

void Parser_obj::ensure(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","ensure",0x52df3412,"hscript.Parser.ensure","hscript/Parser.hx",196,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 197)		HX_VARI( ::hx::EnumBase,t) = this->token();
HXLINE( 198)		if (hx::IsNotEq( t,tk )) {
HXLINE( 198)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

::hx::EnumBase Parser_obj::expr(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","expr",0xd9af3e89,"hscript.Parser.expr","hscript/Parser.hx",205,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 205)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expr,return )

Int Parser_obj::pmin(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","pmin",0xe0ec3876,"hscript.Parser.pmin","hscript/Parser.hx",213,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 213)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmin,return )

Int Parser_obj::pmax(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","pmax",0xe0ec3188,"hscript.Parser.pmax","hscript/Parser.hx",221,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 221)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmax,return )

::hx::EnumBase Parser_obj::mk(::hx::EnumBase e, ::Dynamic pmin, ::Dynamic pmax){
            	HX_STACK_FRAME("hscript.Parser","mk",0xd828e3b2,"hscript.Parser.mk","hscript/Parser.hx",231,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(pmin,"pmin")
            	HX_STACK_ARG(pmax,"pmax")
HXLINE( 231)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,mk,return )

Bool Parser_obj::isBlock(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","isBlock",0x99f5642f,"hscript.Parser.isBlock","hscript/Parser.hx",236,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 236)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 236)		switch((int)(_hx_tmp)){
            			case (int)2: {
HXLINE( 239)				HX_VARI_NAME( ::hx::EnumBase,e1,"e") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 239)				Bool _hx_tmp1 = hx::IsNotNull( e1 );
HXDLIN( 239)				if (_hx_tmp1) {
HXLINE( 236)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 236)					return false;
            				}
            			}
            			break;
            			case (int)4: case (int)21: case (int)23: {
HXLINE( 236)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE( 236)				return this->isBlock(e->_hx_getObject(2).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)7: {
HXLINE( 242)				HX_VARI_NAME( ::hx::EnumBase,e2,"e") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 242)				if (!(e->_hx_getBool(1))) {
HXLINE( 236)					return this->isBlock(e2);
            				}
            				else {
HXLINE( 236)					return false;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 240)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 240)				HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 240)				Bool _hx_tmp2 = hx::IsNotNull( e21 );
HXDLIN( 240)				if (_hx_tmp2) {
HXLINE( 236)					return this->isBlock(e21);
            				}
            				else {
HXLINE( 236)					return this->isBlock(e11);
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 236)				return this->isBlock(e->_hx_getObject(1).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)11: {
HXLINE( 236)				return this->isBlock(e->_hx_getObject(2).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)14: {
HXLINE( 236)				return this->isBlock(e->_hx_getObject(1).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)15: {
HXLINE( 245)				HX_VARI_NAME( ::hx::EnumBase,e3,"e") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 245)				Bool _hx_tmp3 = hx::IsNotNull( e3 );
HXDLIN( 245)				if (_hx_tmp3) {
HXLINE( 236)					return this->isBlock(e3);
            				}
            				else {
HXLINE( 236)					return false;
            				}
            			}
            			break;
            			case (int)20: {
HXLINE( 236)				return this->isBlock(e->_hx_getObject(3).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			default:{
HXLINE( 236)				return false;
            			}
            		}
HXDLIN( 236)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

::hx::EnumBase Parser_obj::parseFullExpr(){
            	HX_STACK_FRAME("hscript.Parser","parseFullExpr",0x2c8eb1e3,"hscript.Parser.parseFullExpr","hscript/Parser.hx",251,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 252)		HX_VARI( ::hx::EnumBase,e) = this->parseExpr();
HXLINE( 253)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 254)		Bool _hx_tmp;
HXDLIN( 254)		if (hx::IsNotEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 254)			_hx_tmp = hx::IsNotEq( tk,::hscript::Token_obj::TEof_dyn() );
            		}
            		else {
HXLINE( 254)			_hx_tmp = false;
            		}
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 255)			Bool _hx_tmp1 = this->isBlock(e);
HXDLIN( 255)			if (_hx_tmp1) {
HXLINE( 256)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 256)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            			}
            			else {
HXLINE( 258)				this->unexpected(tk);
            			}
            		}
HXLINE( 260)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFullExpr,return )

::hx::EnumBase Parser_obj::parseObject( ::Dynamic p1){
            	HX_STACK_FRAME("hscript.Parser","parseObject",0xf1927c7e,"hscript.Parser.parseObject","hscript/Parser.hx",263,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p1,"p1")
HXLINE( 265)		HX_VARI( ::Array< ::Dynamic>,fl) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 266)		while(true){
HXLINE( 267)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 268)			HX_VARI( ::String,id) = null();
HXLINE( 269)			Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 269)			switch((int)(_hx_tmp)){
            				case (int)1: {
HXLINE( 271)					HX_VARI( ::hx::EnumBase,c) = tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 271)					{
HXLINE( 272)						Bool _hx_tmp1 = !(this->allowJSON);
HXDLIN( 272)						if (_hx_tmp1) {
HXLINE( 273)							this->unexpected(tk);
            						}
HXLINE( 274)						Int _hx_tmp2 = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN( 274)						if ((_hx_tmp2 == (int)2)) {
HXLINE( 275)							id = c->_hx_getString(0);
            						}
            						else {
HXLINE( 276)							this->unexpected(tk);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 270)					id = tk->_hx_getString(0);
            				}
            				break;
            				case (int)7: {
HXLINE( 279)					goto _hx_goto_17;
            				}
            				break;
            				default:{
HXLINE( 281)					this->unexpected(tk);
            				}
            			}
HXLINE( 283)			{
HXLINE( 283)				HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 283)				if (hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 283)					this->unexpected(t);
            				}
            			}
HXLINE( 284)			::hx::EnumBase _hx_tmp3 = this->parseExpr();
HXDLIN( 284)			fl->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("e",65,00,00,00),_hx_tmp3)
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 285)			tk = this->token();
HXLINE( 286)			Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 286)			switch((int)(_hx_tmp4)){
            				case (int)7: {
HXLINE( 288)					goto _hx_goto_17;
            				}
            				break;
            				case (int)9: {
            				}
            				break;
            				default:{
HXLINE( 291)					this->unexpected(tk);
            				}
            			}
            		}
            		_hx_goto_17:;
HXLINE( 294)		::hx::EnumBase e = ::hscript::Expr_obj::EObject(fl);
HXDLIN( 294)		return this->parseExprNext(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseObject,return )

::hx::EnumBase Parser_obj::parseExpr(){
            	HX_STACK_FRAME("hscript.Parser","parseExpr",0x8f01bd34,"hscript.Parser.parseExpr","hscript/Parser.hx",297,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 298)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 302)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 302)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE( 309)				::hx::EnumBase e = ::hscript::Expr_obj::EConst(tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXDLIN( 309)				return this->parseExprNext(e);
            			}
            			break;
            			case (int)2: {
HXLINE( 303)				HX_VARI( ::String,id) = tk->_hx_getString(0);
HXLINE( 304)				HX_VARI_NAME( ::hx::EnumBase,e1,"e") = this->parseStructure(id);
HXLINE( 305)				Bool _hx_tmp1 = hx::IsNull( e1 );
HXDLIN( 305)				if (_hx_tmp1) {
HXLINE( 306)					::hx::EnumBase e2 = ::hscript::Expr_obj::EIdent(id);
HXDLIN( 306)					e1 = e2;
            				}
HXLINE( 307)				return this->parseExprNext(e1);
            			}
            			break;
            			case (int)3: {
HXLINE( 357)				HX_VARI( ::String,op) = tk->_hx_getString(0);
HXLINE( 358)				Bool _hx_tmp2 = this->unops->exists(op);
HXDLIN( 358)				if (_hx_tmp2) {
HXLINE( 359)					::hx::EnumBase _hx_tmp3 = this->parseExpr();
HXDLIN( 359)					return this->makeUnop(op,_hx_tmp3);
            				}
HXLINE( 360)				return this->unexpected(tk);
            			}
            			break;
            			case (int)4: {
HXLINE( 311)				HX_VARI_NAME( ::hx::EnumBase,e3,"e") = this->parseExpr();
HXLINE( 312)				{
HXLINE( 312)					HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 312)					if (hx::IsNotEq( t,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 312)						this->unexpected(t);
            					}
            				}
HXLINE( 313)				::hx::EnumBase e4 = ::hscript::Expr_obj::EParent(e3);
HXDLIN( 313)				return this->parseExprNext(e4);
            			}
            			break;
            			case (int)6: {
HXLINE( 315)				tk = this->token();
HXLINE( 316)				Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 316)				switch((int)(_hx_tmp4)){
            					case (int)1: {
HXLINE( 328)						HX_VARI( ::hx::EnumBase,c) = tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 329)						Bool _hx_tmp5 = this->allowJSON;
HXDLIN( 329)						if (_hx_tmp5) {
HXLINE( 330)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN( 330)							if ((_hx_tmp6 == (int)2)) {
HXLINE( 332)								HX_VARI( ::hx::EnumBase,tk2) = this->token();
HXLINE( 333)								{
HXLINE( 333)									HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 333)									_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk2,_this->head);
            								}
HXLINE( 334)								{
HXLINE( 334)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 334)									_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            								}
HXLINE( 335)								Int _hx_tmp7 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 335)								if ((_hx_tmp7 == (int)14)) {
HXLINE( 337)									::hx::EnumBase _hx_tmp8 = this->parseObject((int)0);
HXDLIN( 337)									return this->parseExprNext(_hx_tmp8);
            								}
            							}
            							else {
HXLINE( 341)								HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 341)								_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this2->head);
            							}
            						}
            						else {
HXLINE( 344)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this3,"_this") = this->tokens;
HXDLIN( 344)							_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this3->head);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 320)						HX_VARI_NAME( ::hx::EnumBase,tk21,"tk2") = this->token();
HXLINE( 321)						{
HXLINE( 321)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this4,"_this") = this->tokens;
HXDLIN( 321)							_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk21,_this4->head);
            						}
HXLINE( 322)						{
HXLINE( 322)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this5,"_this") = this->tokens;
HXDLIN( 322)							_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this5->head);
            						}
HXLINE( 323)						Int _hx_tmp9 = ( ( ::hx::EnumBase)(tk21) )->_hx_getIndex();
HXDLIN( 323)						if ((_hx_tmp9 == (int)14)) {
HXLINE( 325)							::hx::EnumBase _hx_tmp10 = this->parseObject((int)0);
HXDLIN( 325)							return this->parseExprNext(_hx_tmp10);
            						}
            					}
            					break;
            					case (int)7: {
HXLINE( 318)						::hx::EnumBase e5 = ::hscript::Expr_obj::EObject(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 318)						return this->parseExprNext(e5);
            					}
            					break;
            					default:{
HXLINE( 346)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this6,"_this") = this->tokens;
HXDLIN( 346)						_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this6->head);
            					}
            				}
HXLINE( 348)				HX_VARI( ::Array< ::Dynamic>,a) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 349)				while(true){
HXLINE( 350)					::hx::EnumBase _hx_tmp11 = this->parseFullExpr();
HXDLIN( 350)					a->push(_hx_tmp11);
HXLINE( 351)					tk = this->token();
HXLINE( 352)					if (hx::IsEq( tk,::hscript::Token_obj::TBrClose_dyn() )) {
HXLINE( 353)						goto _hx_goto_18;
            					}
HXLINE( 354)					{
HXLINE( 354)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this7,"_this") = this->tokens;
HXDLIN( 354)						_this7->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this7->head);
            					}
            				}
            				_hx_goto_18:;
HXLINE( 356)				::hx::EnumBase e6 = ::hscript::Expr_obj::EBlock(a);
HXDLIN( 356)				return e6;
            			}
            			break;
            			case (int)11: {
HXLINE( 362)				HX_VARI_NAME( ::Array< ::Dynamic>,a1,"a") = ::Array_obj< ::Dynamic>::__new();
HXLINE( 363)				tk = this->token();
HXLINE( 364)				while(hx::IsNotEq( tk,::hscript::Token_obj::TBkClose_dyn() )){
HXLINE( 365)					{
HXLINE( 365)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this8,"_this") = this->tokens;
HXDLIN( 365)						_this8->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this8->head);
            					}
HXLINE( 366)					::hx::EnumBase _hx_tmp12 = this->parseExpr();
HXDLIN( 366)					a1->push(_hx_tmp12);
HXLINE( 367)					tk = this->token();
HXLINE( 368)					if (hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 369)						tk = this->token();
            					}
            				}
HXLINE( 371)				Bool _hx_tmp13 = (a1->length == (int)1);
HXDLIN( 371)				if (_hx_tmp13) {
HXLINE( 372)					HX_VARI(  ::hx::EnumBase,value) = ( ( ::hx::EnumBase)(a1->__get((int)0).StaticCast< ::hx::EnumBase >()) );
HXDLIN( 372)					Int _hx_tmp14 = value->_hx_getIndex();
HXDLIN( 372)					switch((int)(_hx_tmp14)){
            						case (int)10: case (int)11: {
HXLINE( 374)							HX_VARI( ::String,tmp) = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 376)							::hx::EnumBase e7 = ::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 376)							::hx::EnumBase e8 = ::hscript::Expr_obj::EVar(tmp,null(),e7);
HXLINE( 377)							::hx::EnumBase _hx_tmp15 = a1->__get((int)0).StaticCast< ::hx::EnumBase >();
HXDLIN( 377)							::hx::EnumBase _hx_tmp16 = this->mapCompr(tmp,_hx_tmp15);
HXLINE( 378)							::hx::EnumBase e9 = ::hscript::Expr_obj::EIdent(tmp);
HXLINE( 375)							::hx::EnumBase e10 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e8)->init(1,_hx_tmp16)->init(2,e9));
HXLINE( 380)							return this->parseExprNext(e10);
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE( 383)				::hx::EnumBase e11 = ::hscript::Expr_obj::EArrayDecl(a1);
HXDLIN( 383)				return this->parseExprNext(e11);
            			}
            			break;
            			default:{
HXLINE( 385)				return this->unexpected(tk);
            			}
            		}
HXLINE( 302)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

::hx::EnumBase Parser_obj::mapCompr(::String tmp,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","mapCompr",0xde0e1f9b,"hscript.Parser.mapCompr","hscript/Parser.hx",389,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tmp,"tmp")
            	HX_STACK_ARG(e,"e")
HXLINE( 390)		HX_VAR( ::hx::EnumBase,edef);
HXDLIN( 390)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 390)		switch((int)(_hx_tmp)){
            			case (int)3: {
HXLINE( 400)				::hx::EnumBase _hx_tmp1 = this->mapCompr(tmp,e->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXLINE( 390)				edef = ::hscript::Expr_obj::EParent(_hx_tmp1);
            			}
            			break;
            			case (int)4: {
HXLINE( 390)				Bool _hx_tmp2 = (e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->length == (int)1);
HXDLIN( 390)				if (_hx_tmp2) {
HXLINE( 397)					HX_VARI_NAME( ::hx::EnumBase,e1,"e") = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->__get((int)0).StaticCast< ::hx::EnumBase >();
HXLINE( 398)					::hx::EnumBase _hx_tmp3 = this->mapCompr(tmp,e1);
HXLINE( 390)					edef = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp3));
            				}
            				else {
HXLINE( 402)					::hx::EnumBase e2 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 402)					::hx::EnumBase e3 = ::hscript::Expr_obj::EField(e2,HX_("push",da,11,61,4a));
HXLINE( 390)					edef = ::hscript::Expr_obj::ECall(e3,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 395)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 395)				HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 395)				HX_VARI( ::hx::EnumBase,cond) = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 395)				Bool _hx_tmp4 = hx::IsNull( e21 );
HXDLIN( 395)				if (_hx_tmp4) {
HXLINE( 396)					::hx::EnumBase _hx_tmp5 = this->mapCompr(tmp,e11);
HXLINE( 390)					edef = ::hscript::Expr_obj::EIf(cond,_hx_tmp5,null());
            				}
            				else {
HXLINE( 402)					::hx::EnumBase e4 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 402)					::hx::EnumBase e5 = ::hscript::Expr_obj::EField(e4,HX_("push",da,11,61,4a));
HXLINE( 390)					edef = ::hscript::Expr_obj::ECall(e5,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 393)				HX_VARI_NAME( ::hx::EnumBase,e22,"e2") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 393)				HX_VARI_NAME( ::hx::EnumBase,cond1,"cond") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 394)				::hx::EnumBase _hx_tmp6 = this->mapCompr(tmp,e22);
HXLINE( 390)				edef = ::hscript::Expr_obj::EWhile(cond1,_hx_tmp6);
            			}
            			break;
            			case (int)11: {
HXLINE( 391)				HX_VARI_NAME( ::hx::EnumBase,e23,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 391)				HX_VARI( ::hx::EnumBase,it) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 391)				HX_VARI( ::String,v) = e->_hx_getString(0);
HXLINE( 392)				::hx::EnumBase _hx_tmp7 = this->mapCompr(tmp,e23);
HXLINE( 390)				edef = ::hscript::Expr_obj::EFor(v,it,_hx_tmp7);
            			}
            			break;
            			default:{
HXLINE( 402)				::hx::EnumBase e6 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 402)				::hx::EnumBase e7 = ::hscript::Expr_obj::EField(e6,HX_("push",da,11,61,4a));
HXLINE( 390)				edef = ::hscript::Expr_obj::ECall(e7,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            			}
            		}
HXLINE( 404)		return edef;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,mapCompr,return )

::hx::EnumBase Parser_obj::makeUnop(::String op,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","makeUnop",0x60b6401c,"hscript.Parser.makeUnop","hscript/Parser.hx",408,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(e,"e")
HXLINE( 408)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 408)		switch((int)(_hx_tmp)){
            			case (int)6: {
HXLINE( 409)				HX_VARI( ::hx::EnumBase,e2) = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 409)				HX_VARI( ::hx::EnumBase,e1) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 409)				HX_VARI( ::String,bop) = e->_hx_getString(0);
HXDLIN( 409)				::hx::EnumBase _hx_tmp1 = this->makeUnop(op,e1);
HXDLIN( 409)				::hx::EnumBase e3 = ::hscript::Expr_obj::EBinop(bop,_hx_tmp1,e2);
HXLINE( 408)				return e3;
            			}
            			break;
            			case (int)22: {
HXLINE( 410)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 410)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 410)				::hx::EnumBase _hx_tmp2 = this->makeUnop(op,e->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXDLIN( 410)				::hx::EnumBase e4 = ::hscript::Expr_obj::ETernary(_hx_tmp2,e21,e31);
HXLINE( 408)				return e4;
            			}
            			break;
            			default:{
HXLINE( 411)				::hx::EnumBase e5 = ::hscript::Expr_obj::EUnop(op,true,e);
HXLINE( 408)				return e5;
            			}
            		}
HXDLIN( 408)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,makeUnop,return )

::hx::EnumBase Parser_obj::makeBinop(::String op,::hx::EnumBase e1,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","makeBinop",0x4ad5ff06,"hscript.Parser.makeBinop","hscript/Parser.hx",416,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(e1,"e1")
            	HX_STACK_ARG(e,"e")
HXLINE( 416)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 416)		switch((int)(_hx_tmp)){
            			case (int)6: {
HXLINE( 417)				HX_VARI( ::hx::EnumBase,e3) = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 417)				HX_VARI( ::hx::EnumBase,e2) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 417)				HX_VARI( ::String,op2) = e->_hx_getString(0);
HXLINE( 418)				Bool _hx_tmp1;
HXDLIN( 418)				 ::Dynamic _hx_tmp2 = this->opPriority->get(op);
HXDLIN( 418)				Bool _hx_tmp3 = hx::IsLessEq( _hx_tmp2,this->opPriority->get(op2) );
HXDLIN( 418)				if (_hx_tmp3) {
HXLINE( 418)					_hx_tmp1 = !(this->opRightAssoc->exists(op));
            				}
            				else {
HXLINE( 418)					_hx_tmp1 = false;
            				}
HXDLIN( 418)				if (_hx_tmp1) {
HXLINE( 419)					::hx::EnumBase _hx_tmp4 = this->makeBinop(op,e1,e2);
HXDLIN( 419)					::hx::EnumBase e4 = ::hscript::Expr_obj::EBinop(op2,_hx_tmp4,e3);
HXLINE( 416)					return e4;
            				}
            				else {
HXLINE( 421)					::hx::EnumBase e5 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 416)					return e5;
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 422)				HX_VARI_NAME( ::hx::EnumBase,e41,"e4") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 422)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 422)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 423)				Bool _hx_tmp5 = this->opRightAssoc->exists(op);
HXDLIN( 423)				if (_hx_tmp5) {
HXLINE( 424)					::hx::EnumBase e6 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 416)					return e6;
            				}
            				else {
HXLINE( 426)					::hx::EnumBase _hx_tmp6 = this->makeBinop(op,e1,e21);
HXDLIN( 426)					::hx::EnumBase e7 = ::hscript::Expr_obj::ETernary(_hx_tmp6,e31,e41);
HXLINE( 416)					return e7;
            				}
            			}
            			break;
            			default:{
HXLINE( 428)				::hx::EnumBase e8 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 416)				return e8;
            			}
            		}
HXDLIN( 416)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,makeBinop,return )

::hx::EnumBase Parser_obj::parseStructure(::String id){
            	HX_STACK_FRAME("hscript.Parser","parseStructure",0x237837d4,"hscript.Parser.parseStructure","hscript/Parser.hx",436,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 436)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
HXLINE( 436)			return ::hscript::Expr_obj::EBreak_dyn();
HXDLIN( 436)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 436)			return ::hscript::Expr_obj::EContinue_dyn();
HXDLIN( 436)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
HXLINE( 495)			::hx::EnumBase _hx_tmp = ::hscript::Token_obj::TId(id);
HXLINE( 436)			return this->unexpected(_hx_tmp);
HXDLIN( 436)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
HXLINE( 480)			{
HXLINE( 480)				HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 480)				if (hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 480)					this->unexpected(t);
            				}
            			}
HXLINE( 481)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 482)			HX_VARI( ::String,vname) = null();
HXLINE( 483)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 483)			if ((_hx_tmp1 == (int)2)) {
HXLINE( 484)				vname = tk->_hx_getString(0);
            			}
            			else {
HXLINE( 485)				this->unexpected(tk);
            			}
HXLINE( 487)			tk = this->token();
HXLINE( 488)			::hx::EnumBase _hx_tmp2 = ::hscript::Token_obj::TId(HX_("in",e5,5b,00,00));
HXDLIN( 488)			if (!(::Type_obj::enumEq(tk,_hx_tmp2))) {
HXLINE( 488)				this->unexpected(tk);
            			}
HXLINE( 489)			HX_VARI( ::hx::EnumBase,eiter) = this->parseExpr();
HXLINE( 490)			{
HXLINE( 490)				HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->token();
HXDLIN( 490)				if (hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 490)					this->unexpected(t1);
            				}
            			}
HXLINE( 491)			HX_VARI( ::hx::EnumBase,e) = this->parseExpr();
HXLINE( 492)			::hx::EnumBase e1 = ::hscript::Expr_obj::EFor(vname,eiter,e);
HXLINE( 436)			return e1;
HXLINE( 479)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 497)			HX_VARI_NAME( ::hx::EnumBase,tk1,"tk") = this->token();
HXLINE( 498)			HX_VARI( ::String,name) = null();
HXLINE( 499)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(tk1) )->_hx_getIndex();
HXDLIN( 499)			if ((_hx_tmp3 == (int)2)) {
HXLINE( 500)				name = tk1->_hx_getString(0);
            			}
            			else {
HXLINE( 501)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 501)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk1,_this->head);
            			}
HXLINE( 503)			{
HXLINE( 503)				HX_VARI_NAME( ::hx::EnumBase,t2,"t") = this->token();
HXDLIN( 503)				if (hx::IsNotEq( t2,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 503)					this->unexpected(t2);
            				}
            			}
HXLINE( 504)			HX_VARI( ::Array< ::Dynamic>,args) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 505)			tk1 = this->token();
HXLINE( 506)			if (hx::IsNotEq( tk1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 507)				HX_VARI( Bool,done) = false;
HXLINE( 508)				while(!(done)){
HXLINE( 509)					HX_VARI_NAME( ::String,name1,"name") = null();
HXDLIN( 509)					HX_VARI( Bool,opt) = false;
HXLINE( 510)					Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk1) )->_hx_getIndex();
HXDLIN( 510)					if ((_hx_tmp4 == (int)13)) {
HXLINE( 512)						opt = true;
HXLINE( 513)						tk1 = this->token();
            					}
HXLINE( 516)					Int _hx_tmp5 = ( ( ::hx::EnumBase)(tk1) )->_hx_getIndex();
HXDLIN( 516)					if ((_hx_tmp5 == (int)2)) {
HXLINE( 517)						name1 = tk1->_hx_getString(0);
            					}
            					else {
HXLINE( 518)						this->unexpected(tk1);
            					}
HXLINE( 520)					tk1 = this->token();
HXLINE( 521)					HX_VARI(  ::Dynamic,arg) =  ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("name",4b,72,ff,48),name1));
HXLINE( 522)					args->push(arg);
HXLINE( 523)					if (opt) {
HXLINE( 523)						arg->__SetField(HX_("opt",33,9c,54,00),true,hx::paccDynamic);
            					}
HXLINE( 524)					Bool _hx_tmp6;
HXDLIN( 524)					if (hx::IsEq( tk1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 524)						_hx_tmp6 = this->allowTypes;
            					}
            					else {
HXLINE( 524)						_hx_tmp6 = false;
            					}
HXDLIN( 524)					if (_hx_tmp6) {
HXLINE( 525)						arg->__SetField(HX_("t",74,00,00,00),this->parseType(),hx::paccDynamic);
HXLINE( 526)						tk1 = this->token();
            					}
HXLINE( 528)					Int _hx_tmp7 = ( ( ::hx::EnumBase)(tk1) )->_hx_getIndex();
HXDLIN( 528)					switch((int)(_hx_tmp7)){
            						case (int)5: {
HXLINE( 532)							done = true;
            						}
            						break;
            						case (int)9: {
HXLINE( 530)							tk1 = this->token();
            						}
            						break;
            						default:{
HXLINE( 534)							this->unexpected(tk1);
            						}
            					}
            				}
            			}
HXLINE( 538)			HX_VARI( ::hx::EnumBase,ret) = null();
HXLINE( 539)			Bool _hx_tmp8 = this->allowTypes;
HXDLIN( 539)			if (_hx_tmp8) {
HXLINE( 540)				tk1 = this->token();
HXLINE( 541)				if (hx::IsNotEq( tk1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 542)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 542)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk1,_this1->head);
            				}
            				else {
HXLINE( 544)					ret = this->parseType();
            				}
            			}
HXLINE( 546)			HX_VARI( ::hx::EnumBase,body) = this->parseExpr();
HXLINE( 547)			::hx::EnumBase e2 = ::hscript::Expr_obj::EFunction(args,body,name,ret);
HXLINE( 436)			return e2;
HXLINE( 496)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 438)			{
HXLINE( 438)				HX_VARI_NAME( ::hx::EnumBase,t3,"t") = this->token();
HXDLIN( 438)				if (hx::IsNotEq( t3,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 438)					this->unexpected(t3);
            				}
            			}
HXLINE( 439)			HX_VARI( ::hx::EnumBase,cond) = this->parseExpr();
HXLINE( 440)			{
HXLINE( 440)				HX_VARI_NAME( ::hx::EnumBase,t4,"t") = this->token();
HXDLIN( 440)				if (hx::IsNotEq( t4,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 440)					this->unexpected(t4);
            				}
            			}
HXLINE( 441)			HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = this->parseExpr();
HXLINE( 442)			HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = null();
HXLINE( 443)			HX_VARI( Bool,semic) = false;
HXLINE( 444)			HX_VARI_NAME( ::hx::EnumBase,tk2,"tk") = this->token();
HXLINE( 445)			if (hx::IsEq( tk2,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 446)				semic = true;
HXLINE( 447)				tk2 = this->token();
            			}
HXLINE( 449)			::hx::EnumBase _hx_tmp9 = ::hscript::Token_obj::TId(HX_("else",b9,e4,14,43));
HXDLIN( 449)			if (::Type_obj::enumEq(tk2,_hx_tmp9)) {
HXLINE( 450)				e21 = this->parseExpr();
            			}
            			else {
HXLINE( 452)				{
HXLINE( 452)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 452)					_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk2,_this2->head);
            				}
HXLINE( 453)				if (semic) {
HXLINE( 453)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this3,"_this") = this->tokens;
HXDLIN( 453)					_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(::hscript::Token_obj::TSemicolon_dyn(),_this3->head);
            				}
            			}
HXLINE( 455)			::hx::EnumBase e3 = ::hscript::Expr_obj::EIf(cond,e11,e21);
HXLINE( 436)			return e3;
HXLINE( 437)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
HXLINE( 554)			HX_VARI( ::Array< ::String >,a) = ::Array_obj< ::String >::__new();
HXLINE( 555)			HX_VARI_NAME( ::hx::EnumBase,tk3,"tk") = this->token();
HXLINE( 556)			Int _hx_tmp10 = ( ( ::hx::EnumBase)(tk3) )->_hx_getIndex();
HXDLIN( 556)			if ((_hx_tmp10 == (int)2)) {
HXLINE( 557)				a->push(tk3->_hx_getString(0));
            			}
            			else {
HXLINE( 558)				this->unexpected(tk3);
            			}
HXLINE( 560)			HX_VARI( Bool,next) = true;
HXLINE( 561)			while(next){
HXLINE( 562)				tk3 = this->token();
HXLINE( 563)				Int _hx_tmp11 = ( ( ::hx::EnumBase)(tk3) )->_hx_getIndex();
HXDLIN( 563)				switch((int)(_hx_tmp11)){
            					case (int)4: {
HXLINE( 571)						next = false;
            					}
            					break;
            					case (int)8: {
HXLINE( 565)						tk3 = this->token();
HXLINE( 566)						Int _hx_tmp12 = ( ( ::hx::EnumBase)(tk3) )->_hx_getIndex();
HXDLIN( 566)						if ((_hx_tmp12 == (int)2)) {
HXLINE( 567)							a->push(tk3->_hx_getString(0));
            						}
            						else {
HXLINE( 568)							this->unexpected(tk3);
            						}
            					}
            					break;
            					default:{
HXLINE( 573)						this->unexpected(tk3);
            					}
            				}
            			}
HXLINE( 576)			HX_VARI_NAME( ::Array< ::Dynamic>,args1,"args") = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXLINE( 577)			::String _hx_tmp13 = a->join(HX_(".",2e,00,00,00));
HXDLIN( 577)			::hx::EnumBase e4 = ::hscript::Expr_obj::ENew(_hx_tmp13,args1);
HXLINE( 436)			return e4;
HXLINE( 553)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
HXLINE( 549)			HX_VARI_NAME( ::hx::EnumBase,tk4,"tk") = this->token();
HXLINE( 550)			{
HXLINE( 550)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this4,"_this") = this->tokens;
HXDLIN( 550)				_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk4,_this4->head);
            			}
HXLINE( 551)			HX_VAR_NAME( ::hx::EnumBase,e5,"e");
HXDLIN( 551)			if (hx::IsEq( tk4,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 551)				e5 = null();
            			}
            			else {
HXLINE( 551)				e5 = this->parseExpr();
            			}
HXLINE( 552)			::hx::EnumBase e6 = ::hscript::Expr_obj::EReturn(e5);
HXLINE( 436)			return e6;
HXLINE( 548)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
HXLINE( 603)			HX_VARI_NAME( ::hx::EnumBase,e7,"e") = this->parseExpr();
HXLINE( 604)			HX_VARI( ::hx::EnumBase,def) = null();
HXDLIN( 604)			HX_VARI( ::Array< ::Dynamic>,cases) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 605)			{
HXLINE( 605)				HX_VARI_NAME( ::hx::EnumBase,t5,"t") = this->token();
HXDLIN( 605)				if (hx::IsNotEq( t5,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE( 605)					this->unexpected(t5);
            				}
            			}
HXLINE( 606)			while(true){
HXLINE( 607)				HX_VARI_NAME( ::hx::EnumBase,tk5,"tk") = this->token();
HXLINE( 608)				Int _hx_tmp14 = ( ( ::hx::EnumBase)(tk5) )->_hx_getIndex();
HXDLIN( 608)				switch((int)(_hx_tmp14)){
            					case (int)2: {
HXLINE( 608)						::String _hx_switch_1 = tk5->_hx_getString(0);
            						if (  (_hx_switch_1==HX_("case",b0,1e,ba,41)) ){
HXLINE( 610)							HX_VARI(  ::Dynamic,c) =  ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("expr",35,fd,1d,43),null())
            								->setFixed(1,HX_("values",e2,03,b7,4f),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 611)							cases->push(c);
HXLINE( 612)							while(true){
HXLINE( 613)								HX_VARI_NAME( ::hx::EnumBase,e8,"e") = this->parseExpr();
HXLINE( 614)								( (::Array< ::Dynamic>)(c->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->push(e8);
HXLINE( 615)								tk5 = this->token();
HXLINE( 616)								Int _hx_tmp15 = ( ( ::hx::EnumBase)(tk5) )->_hx_getIndex();
HXDLIN( 616)								switch((int)(_hx_tmp15)){
            									case (int)9: {
            									}
            									break;
            									case (int)14: {
HXLINE( 620)										goto _hx_goto_25;
            									}
            									break;
            									default:{
HXLINE( 622)										this->unexpected(tk5);
            									}
            								}
            							}
            							_hx_goto_25:;
HXLINE( 625)							HX_VARI( ::Array< ::Dynamic>,exprs) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 626)							while(true){
HXLINE( 627)								tk5 = this->token();
HXLINE( 628)								{
HXLINE( 628)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this5,"_this") = this->tokens;
HXDLIN( 628)									_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk5,_this5->head);
            								}
HXLINE( 629)								Int _hx_tmp16 = ( ( ::hx::EnumBase)(tk5) )->_hx_getIndex();
HXDLIN( 629)								switch((int)(_hx_tmp16)){
            									case (int)2: {
HXLINE( 629)										::String _hx_switch_2 = tk5->_hx_getString(0);
            										if (  (_hx_switch_2==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_2==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 631)											goto _hx_goto_26;
HXDLIN( 631)											goto _hx_goto_27;
            										}
            										/* default */{
HXLINE( 633)											::hx::EnumBase _hx_tmp17 = this->parseFullExpr();
HXDLIN( 633)											exprs->push(_hx_tmp17);
            										}
            										_hx_goto_27:;
            									}
            									break;
            									case (int)7: {
HXLINE( 631)										goto _hx_goto_26;
            									}
            									break;
            									default:{
HXLINE( 633)										::hx::EnumBase _hx_tmp18 = this->parseFullExpr();
HXDLIN( 633)										exprs->push(_hx_tmp18);
            									}
            								}
            							}
            							_hx_goto_26:;
HXLINE( 636)							::hx::EnumBase _hx_tmp19;
HXDLIN( 636)							Bool _hx_tmp20 = (exprs->length == (int)1);
HXDLIN( 636)							if (_hx_tmp20) {
HXLINE( 636)								_hx_tmp19 = exprs->__get((int)0).StaticCast< ::hx::EnumBase >();
            							}
            							else {
HXLINE( 638)								Bool _hx_tmp21 = (exprs->length == (int)0);
HXDLIN( 638)								if (_hx_tmp21) {
HXLINE( 639)									::hx::EnumBase e9 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXLINE( 636)									_hx_tmp19 = e9;
            								}
            								else {
HXLINE( 641)									::hx::EnumBase e10 = ::hscript::Expr_obj::EBlock(exprs);
HXLINE( 636)									_hx_tmp19 = e10;
            								}
            							}
HXDLIN( 636)							c->__SetField(HX_("expr",35,fd,1d,43),_hx_tmp19,hx::paccDynamic);
HXLINE( 609)							goto _hx_goto_24;
            						}
            						if (  (_hx_switch_1==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 643)							Bool _hx_tmp22 = hx::IsNotNull( def );
HXDLIN( 643)							if (_hx_tmp22) {
HXLINE( 643)								this->unexpected(tk5);
            							}
HXLINE( 644)							{
HXLINE( 644)								HX_VARI_NAME( ::hx::EnumBase,t6,"t") = this->token();
HXDLIN( 644)								if (hx::IsNotEq( t6,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 644)									this->unexpected(t6);
            								}
            							}
HXLINE( 645)							HX_VARI_NAME( ::Array< ::Dynamic>,exprs1,"exprs") = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 646)							while(true){
HXLINE( 647)								tk5 = this->token();
HXLINE( 648)								{
HXLINE( 648)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this6,"_this") = this->tokens;
HXDLIN( 648)									_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk5,_this6->head);
            								}
HXLINE( 649)								Int _hx_tmp23 = ( ( ::hx::EnumBase)(tk5) )->_hx_getIndex();
HXDLIN( 649)								switch((int)(_hx_tmp23)){
            									case (int)2: {
HXLINE( 649)										::String _hx_switch_3 = tk5->_hx_getString(0);
            										if (  (_hx_switch_3==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_3==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 651)											goto _hx_goto_28;
HXDLIN( 651)											goto _hx_goto_29;
            										}
            										/* default */{
HXLINE( 653)											::hx::EnumBase _hx_tmp24 = this->parseFullExpr();
HXDLIN( 653)											exprs1->push(_hx_tmp24);
            										}
            										_hx_goto_29:;
            									}
            									break;
            									case (int)7: {
HXLINE( 651)										goto _hx_goto_28;
            									}
            									break;
            									default:{
HXLINE( 653)										::hx::EnumBase _hx_tmp25 = this->parseFullExpr();
HXDLIN( 653)										exprs1->push(_hx_tmp25);
            									}
            								}
            							}
            							_hx_goto_28:;
HXLINE( 656)							Bool _hx_tmp26 = (exprs1->length == (int)1);
HXDLIN( 656)							if (_hx_tmp26) {
HXLINE( 657)								def = exprs1->__get((int)0).StaticCast< ::hx::EnumBase >();
            							}
            							else {
HXLINE( 658)								Bool _hx_tmp27 = (exprs1->length == (int)0);
HXDLIN( 658)								if (_hx_tmp27) {
HXLINE( 659)									::hx::EnumBase e12 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 659)									def = e12;
            								}
            								else {
HXLINE( 661)									::hx::EnumBase e13 = ::hscript::Expr_obj::EBlock(exprs1);
HXDLIN( 661)									def = e13;
            								}
            							}
HXLINE( 642)							goto _hx_goto_24;
            						}
            						/* default */{
HXLINE( 665)							this->unexpected(tk5);
            						}
            						_hx_goto_24:;
            					}
            					break;
            					case (int)7: {
HXLINE( 663)						goto _hx_goto_23;
            					}
            					break;
            					default:{
HXLINE( 665)						this->unexpected(tk5);
            					}
            				}
            			}
            			_hx_goto_23:;
HXLINE( 668)			::hx::EnumBase e14 = ::hscript::Expr_obj::ESwitch(e7,cases,def);
HXLINE( 436)			return e14;
HXLINE( 602)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
HXLINE( 579)			HX_VARI_NAME( ::hx::EnumBase,e15,"e") = this->parseExpr();
HXLINE( 580)			::hx::EnumBase e16 = ::hscript::Expr_obj::EThrow(e15);
HXLINE( 436)			return e16;
HXLINE( 578)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
HXLINE( 582)			HX_VARI_NAME( ::hx::EnumBase,e17,"e") = this->parseExpr();
HXLINE( 583)			HX_VARI_NAME( ::hx::EnumBase,tk6,"tk") = this->token();
HXLINE( 584)			::hx::EnumBase _hx_tmp28 = ::hscript::Token_obj::TId(HX_("catch",3b,7c,21,41));
HXDLIN( 584)			if (!(::Type_obj::enumEq(tk6,_hx_tmp28))) {
HXLINE( 584)				this->unexpected(tk6);
            			}
HXLINE( 585)			{
HXLINE( 585)				HX_VARI_NAME( ::hx::EnumBase,t7,"t") = this->token();
HXDLIN( 585)				if (hx::IsNotEq( t7,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 585)					this->unexpected(t7);
            				}
            			}
HXLINE( 586)			tk6 = this->token();
HXLINE( 587)			HX_VAR_NAME( ::String,vname1,"vname");
HXDLIN( 587)			Int _hx_tmp29 = ( ( ::hx::EnumBase)(tk6) )->_hx_getIndex();
HXDLIN( 587)			if ((_hx_tmp29 == (int)2)) {
HXLINE( 587)				vname1 = tk6->_hx_getString(0);
            			}
            			else {
HXLINE( 587)				vname1 = this->unexpected(tk6);
            			}
HXLINE( 591)			{
HXLINE( 591)				HX_VARI_NAME( ::hx::EnumBase,t8,"t") = this->token();
HXDLIN( 591)				if (hx::IsNotEq( t8,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 591)					this->unexpected(t8);
            				}
            			}
HXLINE( 592)			HX_VARI_NAME( ::hx::EnumBase,t9,"t") = null();
HXLINE( 593)			Bool _hx_tmp30 = this->allowTypes;
HXDLIN( 593)			if (_hx_tmp30) {
HXLINE( 594)				t9 = this->parseType();
            			}
            			else {
HXLINE( 596)				tk6 = this->token();
HXLINE( 597)				::hx::EnumBase _hx_tmp31 = ::hscript::Token_obj::TId(HX_("Dynamic",5f,c7,66,03));
HXDLIN( 597)				if (!(::Type_obj::enumEq(tk6,_hx_tmp31))) {
HXLINE( 597)					this->unexpected(tk6);
            				}
            			}
HXLINE( 599)			{
HXLINE( 599)				HX_VARI_NAME( ::hx::EnumBase,t10,"t") = this->token();
HXDLIN( 599)				if (hx::IsNotEq( t10,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 599)					this->unexpected(t10);
            				}
            			}
HXLINE( 600)			HX_VARI( ::hx::EnumBase,ec) = this->parseExpr();
HXLINE( 601)			::hx::EnumBase e18 = ::hscript::Expr_obj::ETry(e17,vname1,t9,ec);
HXLINE( 436)			return e18;
HXLINE( 581)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE( 457)			HX_VARI_NAME( ::hx::EnumBase,tk7,"tk") = this->token();
HXLINE( 458)			HX_VARI( ::String,ident) = null();
HXLINE( 459)			Int _hx_tmp32 = ( ( ::hx::EnumBase)(tk7) )->_hx_getIndex();
HXDLIN( 459)			if ((_hx_tmp32 == (int)2)) {
HXLINE( 460)				ident = tk7->_hx_getString(0);
            			}
            			else {
HXLINE( 461)				this->unexpected(tk7);
            			}
HXLINE( 463)			tk7 = this->token();
HXLINE( 464)			HX_VARI_NAME( ::hx::EnumBase,t11,"t") = null();
HXLINE( 465)			Bool _hx_tmp33;
HXDLIN( 465)			if (hx::IsEq( tk7,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 465)				_hx_tmp33 = this->allowTypes;
            			}
            			else {
HXLINE( 465)				_hx_tmp33 = false;
            			}
HXDLIN( 465)			if (_hx_tmp33) {
HXLINE( 466)				t11 = this->parseType();
HXLINE( 467)				tk7 = this->token();
            			}
HXLINE( 469)			HX_VARI_NAME( ::hx::EnumBase,e19,"e") = null();
HXLINE( 470)			::hx::EnumBase _hx_tmp34 = ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
HXDLIN( 470)			if (::Type_obj::enumEq(tk7,_hx_tmp34)) {
HXLINE( 471)				e19 = this->parseExpr();
            			}
            			else {
HXLINE( 473)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this7,"_this") = this->tokens;
HXDLIN( 473)				_this7->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk7,_this7->head);
            			}
HXLINE( 474)			::hx::EnumBase e20 = ::hscript::Expr_obj::EVar(ident,t11,e19);
HXLINE( 436)			return e20;
HXLINE( 456)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
HXLINE( 476)			HX_VARI( ::hx::EnumBase,econd) = this->parseExpr();
HXLINE( 477)			HX_VARI_NAME( ::hx::EnumBase,e22,"e") = this->parseExpr();
HXLINE( 478)			::hx::EnumBase e23 = ::hscript::Expr_obj::EWhile(econd,e22);
HXLINE( 436)			return e23;
HXLINE( 475)			goto _hx_goto_20;
            		}
            		/* default */{
HXLINE( 436)			return null();
            		}
            		_hx_goto_20:;
HXDLIN( 436)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseStructure,return )

::hx::EnumBase Parser_obj::parseExprNext(::hx::EnumBase e1){
            	HX_STACK_FRAME("hscript.Parser","parseExprNext",0x83d61847,"hscript.Parser.parseExprNext","hscript/Parser.hx",674,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e1,"e1")
HXLINE( 675)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 676)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 676)		switch((int)(_hx_tmp)){
            			case (int)3: {
HXLINE( 677)				HX_VARI( ::String,op) = tk->_hx_getString(0);
HXLINE( 678)				 ::Dynamic _hx_tmp1 = this->unops->get(op);
HXDLIN( 678)				if (_hx_tmp1) {
HXLINE( 679)					Bool _hx_tmp2;
HXDLIN( 679)					Bool _hx_tmp3 = !(this->isBlock(e1));
HXDLIN( 679)					if (_hx_tmp3) {
HXLINE( 679)						Int _hx_tmp4 = ( ( ::hx::EnumBase)(e1) )->_hx_getIndex();
HXDLIN( 679)						if ((_hx_tmp4 == (int)3)) {
HXLINE( 679)							_hx_tmp2 = true;
            						}
            						else {
HXLINE( 679)							_hx_tmp2 = false;
            						}
            					}
            					else {
HXLINE( 679)						_hx_tmp2 = true;
            					}
HXDLIN( 679)					if (_hx_tmp2) {
HXLINE( 680)						{
HXLINE( 680)							HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 680)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            						}
HXLINE( 681)						return e1;
            					}
HXLINE( 683)					::hx::EnumBase e = ::hscript::Expr_obj::EUnop(op,false,e1);
HXDLIN( 683)					return this->parseExprNext(e);
            				}
HXLINE( 685)				::hx::EnumBase _hx_tmp5 = this->parseExpr();
HXDLIN( 685)				return this->makeBinop(op,e1,_hx_tmp5);
            			}
            			break;
            			case (int)4: {
HXLINE( 695)				::Array< ::Dynamic> _hx_tmp6 = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXDLIN( 695)				::hx::EnumBase e2 = ::hscript::Expr_obj::ECall(e1,_hx_tmp6);
HXDLIN( 695)				return this->parseExprNext(e2);
            			}
            			break;
            			case (int)8: {
HXLINE( 687)				tk = this->token();
HXLINE( 688)				HX_VARI( ::String,field) = null();
HXLINE( 689)				Int _hx_tmp7 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 689)				if ((_hx_tmp7 == (int)2)) {
HXLINE( 690)					field = tk->_hx_getString(0);
            				}
            				else {
HXLINE( 691)					this->unexpected(tk);
            				}
HXLINE( 693)				::hx::EnumBase e3 = ::hscript::Expr_obj::EField(e1,field);
HXDLIN( 693)				return this->parseExprNext(e3);
            			}
            			break;
            			case (int)11: {
HXLINE( 697)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = this->parseExpr();
HXLINE( 698)				{
HXLINE( 698)					HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 698)					if (hx::IsNotEq( t,::hscript::Token_obj::TBkClose_dyn() )) {
HXLINE( 698)						this->unexpected(t);
            					}
            				}
HXLINE( 699)				::hx::EnumBase e4 = ::hscript::Expr_obj::EArray(e1,e21);
HXDLIN( 699)				return this->parseExprNext(e4);
            			}
            			break;
            			case (int)13: {
HXLINE( 701)				HX_VARI_NAME( ::hx::EnumBase,e22,"e2") = this->parseExpr();
HXLINE( 702)				{
HXLINE( 702)					HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->token();
HXDLIN( 702)					if (hx::IsNotEq( t1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 702)						this->unexpected(t1);
            					}
            				}
HXLINE( 703)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = this->parseExpr();
HXLINE( 704)				::hx::EnumBase e5 = ::hscript::Expr_obj::ETernary(e1,e22,e31);
HXDLIN( 704)				return e5;
            			}
            			break;
            			default:{
HXLINE( 706)				{
HXLINE( 706)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 706)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            				}
HXLINE( 707)				return e1;
            			}
            		}
HXLINE( 676)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprNext,return )

::hx::EnumBase Parser_obj::parseType(){
            	HX_STACK_FRAME("hscript.Parser","parseType",0x98ecb2b9,"hscript.Parser.parseType","hscript/Parser.hx",711,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 712)		HX_VARI( ::hx::EnumBase,t) = this->token();
HXLINE( 713)		Int _hx_tmp = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 713)		switch((int)(_hx_tmp)){
            			case (int)2: {
HXLINE( 715)				HX_VARI( ::Array< ::String >,path) = ::Array_obj< ::String >::__new(1)->init(0,t->_hx_getString(0));
HXLINE( 716)				while(true){
HXLINE( 717)					t = this->token();
HXLINE( 718)					if (hx::IsNotEq( t,::hscript::Token_obj::TDot_dyn() )) {
HXLINE( 719)						goto _hx_goto_30;
            					}
HXLINE( 720)					t = this->token();
HXLINE( 721)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 721)					if ((_hx_tmp1 == (int)2)) {
HXLINE( 723)						path->push(t->_hx_getString(0));
            					}
            					else {
HXLINE( 725)						this->unexpected(t);
            					}
            				}
            				_hx_goto_30:;
HXLINE( 728)				HX_VARI( ::Array< ::Dynamic>,params) = null();
HXLINE( 729)				Int _hx_tmp2 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 729)				if ((_hx_tmp2 == (int)3)) {
HXLINE( 731)					if ((t->_hx_getString(0) == HX_("<",3c,00,00,00))) {
HXLINE( 732)						params = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 733)						while(true){
HXLINE( 734)							::hx::EnumBase _hx_tmp3 = this->parseType();
HXDLIN( 734)							params->push(_hx_tmp3);
HXLINE( 735)							t = this->token();
HXLINE( 736)							Int _hx_tmp4 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 736)							switch((int)(_hx_tmp4)){
            								case (int)3: {
HXLINE( 738)									HX_VARI( ::String,op) = t->_hx_getString(0);
HXDLIN( 738)									{
HXLINE( 739)										if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 739)											goto _hx_goto_31;
            										}
HXLINE( 740)										 ::Dynamic _hx_tmp5 = op.charCodeAt((int)0);
HXDLIN( 740)										if (hx::IsEq( _hx_tmp5,(int)62 )) {
HXLINE( 744)											{
HXLINE( 744)												HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 744)												::String _hx_tmp6 = op.substr((int)1,null());
HXDLIN( 744)												::hx::EnumBase item = ::hscript::Token_obj::TOp(_hx_tmp6);
HXDLIN( 744)												_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(item,_this->head);
            											}
HXLINE( 746)											goto _hx_goto_31;
            										}
            									}
            								}
            								break;
            								case (int)9: {
HXLINE( 737)									continue;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 750)							this->unexpected(t);
            						}
            						_hx_goto_31:;
            					}
            					else {
HXLINE( 753)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 753)						_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(t,_this1->head);
            					}
            				}
            				else {
HXLINE( 755)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 755)					_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(t,_this2->head);
            				}
HXLINE( 757)				::hx::EnumBase _hx_tmp7 = ::hscript::CType_obj::CTPath(path,params);
HXDLIN( 757)				return this->parseTypeNext(_hx_tmp7);
            			}
            			break;
            			case (int)4: {
HXLINE( 759)				HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->parseType();
HXLINE( 760)				{
HXLINE( 760)					HX_VARI_NAME( ::hx::EnumBase,t2,"t") = this->token();
HXDLIN( 760)					if (hx::IsNotEq( t2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 760)						this->unexpected(t2);
            					}
            				}
HXLINE( 761)				::hx::EnumBase _hx_tmp8 = ::hscript::CType_obj::CTParent(t1);
HXDLIN( 761)				return this->parseTypeNext(_hx_tmp8);
            			}
            			break;
            			case (int)6: {
HXLINE( 763)				HX_VARI( ::Array< ::Dynamic>,fields) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 764)				while(true){
HXLINE( 765)					t = this->token();
HXLINE( 766)					Int _hx_tmp9 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 766)					switch((int)(_hx_tmp9)){
            						case (int)2: {
HXLINE( 769)							{
HXLINE( 769)								HX_VARI_NAME( ::hx::EnumBase,t3,"t") = this->token();
HXDLIN( 769)								if (hx::IsNotEq( t3,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 769)									this->unexpected(t3);
            								}
            							}
HXLINE( 770)							::hx::EnumBase _hx_tmp10 = this->parseType();
HXDLIN( 770)							fields->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("t",74,00,00,00),_hx_tmp10)
            								->setFixed(1,HX_("name",4b,72,ff,48),t->_hx_getString(0))));
HXLINE( 771)							t = this->token();
HXLINE( 772)							Int _hx_tmp11 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 772)							switch((int)(_hx_tmp11)){
            								case (int)7: {
HXLINE( 774)									goto _hx_goto_32;
            								}
            								break;
            								case (int)9: {
            								}
            								break;
            								default:{
HXLINE( 775)									this->unexpected(t);
            								}
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 767)							goto _hx_goto_32;
            						}
            						break;
            						default:{
HXLINE( 778)							this->unexpected(t);
            						}
            					}
            				}
            				_hx_goto_32:;
HXLINE( 781)				::hx::EnumBase _hx_tmp12 = ::hscript::CType_obj::CTAnon(fields);
HXDLIN( 781)				return this->parseTypeNext(_hx_tmp12);
            			}
            			break;
            			default:{
HXLINE( 783)				return this->unexpected(t);
            			}
            		}
HXLINE( 713)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

::hx::EnumBase Parser_obj::parseTypeNext(::hx::EnumBase t){
            	HX_STACK_FRAME("hscript.Parser","parseTypeNext",0x8b2ab44c,"hscript.Parser.parseTypeNext","hscript/Parser.hx",787,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 788)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 789)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 789)		if ((_hx_tmp == (int)3)) {
HXLINE( 791)			if ((tk->_hx_getString(0) != HX_("->",71,27,00,00))) {
HXLINE( 792)				{
HXLINE( 792)					HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 792)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            				}
HXLINE( 793)				return t;
            			}
            		}
            		else {
HXLINE( 796)			{
HXLINE( 796)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 796)				_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            			}
HXLINE( 797)			return t;
            		}
HXLINE( 799)		HX_VARI( ::hx::EnumBase,t2) = this->parseType();
HXLINE( 800)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(t2) )->_hx_getIndex();
HXDLIN( 800)		if ((_hx_tmp1 == (int)1)) {
HXLINE( 802)			t2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->unshift(t);
HXLINE( 803)			return t2;
            		}
            		else {
HXLINE( 805)			return ::hscript::CType_obj::CTFun(::Array_obj< ::Dynamic>::__new(1)->init(0,t),t2);
            		}
HXLINE( 800)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseTypeNext,return )

::Array< ::Dynamic> Parser_obj::parseExprList(::hx::EnumBase etk){
            	HX_STACK_FRAME("hscript.Parser","parseExprList",0x8286afb2,"hscript.Parser.parseExprList","hscript/Parser.hx",809,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(etk,"etk")
HXLINE( 810)		HX_VARI( ::Array< ::Dynamic>,args) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 811)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 812)		if (hx::IsEq( tk,etk )) {
HXLINE( 813)			return args;
            		}
HXLINE( 814)		{
HXLINE( 814)			HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 814)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            		}
HXLINE( 815)		while(true){
HXLINE( 816)			::hx::EnumBase _hx_tmp = this->parseExpr();
HXDLIN( 816)			args->push(_hx_tmp);
HXLINE( 817)			tk = this->token();
HXLINE( 818)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 818)			if ((_hx_tmp1 != (int)9)) {
HXLINE( 821)				if (hx::IsEq( tk,etk )) {
HXLINE( 821)					goto _hx_goto_33;
            				}
HXLINE( 822)				this->unexpected(tk);
            			}
            		}
            		_hx_goto_33:;
HXLINE( 825)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprList,return )

void Parser_obj::incPos(){
            	HX_STACK_FRAME("hscript.Parser","incPos",0xe19d25aa,"hscript.Parser.incPos","hscript/Parser.hx",828,0x98735743)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,incPos,(void))

Int Parser_obj::readChar(){
            	HX_STACK_FRAME("hscript.Parser","readChar",0x8625b4a0,"hscript.Parser.readChar","hscript/Parser.hx",836,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 836)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 836)			return this->input->readByte();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 836)				return (int)0;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 836)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readChar,return )

::String Parser_obj::readString(Int until){
            	HX_STACK_FRAME("hscript.Parser","readString",0xfc2f051b,"hscript.Parser.readString","hscript/Parser.hx",839,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(until,"until")
HXLINE( 840)		HX_VARI( Int,c) = (int)0;
HXLINE( 841)		HX_VARI(  ::haxe::io::BytesOutput,b) =  ::haxe::io::BytesOutput_obj::__new();
HXLINE( 842)		HX_VARI( Bool,esc) = false;
HXLINE( 843)		HX_VARI( Int,old) = this->line;
HXLINE( 844)		HX_VARI(  ::haxe::io::Input,s) = this->input;
HXLINE( 848)		while(true){
HXLINE( 849)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 851)				c = s->readByte();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 853)					this->line = old;
HXLINE( 854)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 856)			if (esc) {
HXLINE( 857)				esc = false;
HXLINE( 858)				switch((int)(c)){
            					case (int)34: case (int)39: case (int)92: {
HXLINE( 862)						b->writeByte(c);
            					}
            					break;
            					case (int)47: {
HXLINE( 863)						Bool _hx_tmp = this->allowJSON;
HXDLIN( 863)						if (_hx_tmp) {
HXLINE( 863)							b->writeByte(c);
            						}
            						else {
HXLINE( 863)							this->invalidChar(c);
            						}
            					}
            					break;
            					case (int)110: {
HXLINE( 859)						b->writeByte((int)10);
            					}
            					break;
            					case (int)114: {
HXLINE( 860)						b->writeByte((int)13);
            					}
            					break;
            					case (int)116: {
HXLINE( 861)						b->writeByte((int)9);
            					}
            					break;
            					case (int)117: {
HXLINE( 865)						Bool _hx_tmp1 = !(this->allowJSON);
HXDLIN( 865)						if (_hx_tmp1) {
HXLINE( 865)							this->invalidChar(c);
            						}
HXLINE( 866)						HX_VARI( ::String,code) = null();
HXLINE( 867)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 872)							code = s->readString((int)4);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e1 = _hx_e;
HXLINE( 874)								this->line = old;
HXLINE( 875)								HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 877)						HX_VARI( Int,k) = (int)0;
HXLINE( 878)						{
HXLINE( 878)							HX_VARI( Int,_g) = (int)0;
HXDLIN( 878)							while((_g < (int)4)){
HXLINE( 878)								HX_VARI( Int,i) = _g++;
HXLINE( 879)								hx::ShlEq(k,(int)4);
HXLINE( 880)								HX_VARI_NAME(  ::Dynamic,_hx_char,"char") = code.charCodeAt(i);
HXLINE( 881)								Bool _hx_tmp2 = hx::IsNull( _hx_char );
HXDLIN( 881)								if (_hx_tmp2) {
HXLINE( 889)									this->invalidChar(_hx_char);
            								}
            								else {
HXLINE( 881)									 ::Dynamic _hx_switch_0 = _hx_char;
            									if (  (_hx_switch_0==(int)48) ||  (_hx_switch_0==(int)49) ||  (_hx_switch_0==(int)50) ||  (_hx_switch_0==(int)51) ||  (_hx_switch_0==(int)52) ||  (_hx_switch_0==(int)53) ||  (_hx_switch_0==(int)54) ||  (_hx_switch_0==(int)55) ||  (_hx_switch_0==(int)56) ||  (_hx_switch_0==(int)57) ){
HXLINE( 883)										hx::AddEq(k,(_hx_char - (int)48));
HXDLIN( 883)										goto _hx_goto_36;
            									}
            									if (  (_hx_switch_0==(int)65) ||  (_hx_switch_0==(int)66) ||  (_hx_switch_0==(int)67) ||  (_hx_switch_0==(int)68) ||  (_hx_switch_0==(int)69) ||  (_hx_switch_0==(int)70) ){
HXLINE( 885)										hx::AddEq(k,(_hx_char - (int)55));
HXDLIN( 885)										goto _hx_goto_36;
            									}
            									if (  (_hx_switch_0==(int)97) ||  (_hx_switch_0==(int)98) ||  (_hx_switch_0==(int)99) ||  (_hx_switch_0==(int)100) ||  (_hx_switch_0==(int)101) ||  (_hx_switch_0==(int)102) ){
HXLINE( 887)										hx::AddEq(k,(_hx_char - (int)87));
HXDLIN( 887)										goto _hx_goto_36;
            									}
            									/* default */{
HXLINE( 889)										this->invalidChar(_hx_char);
            									}
            									_hx_goto_36:;
            								}
            							}
            						}
HXLINE( 893)						if ((k <= (int)127)) {
HXLINE( 894)							b->writeByte(k);
            						}
            						else {
HXLINE( 895)							if ((k <= (int)2047)) {
HXLINE( 896)								b->writeByte(((int)(int)192 | (int)((int)k >> (int)(int)6)));
HXLINE( 897)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            							else {
HXLINE( 899)								b->writeByte(((int)(int)224 | (int)((int)k >> (int)(int)12)));
HXLINE( 900)								b->writeByte(((int)(int)128 | (int)((int)((int)k >> (int)(int)6) & (int)(int)63)));
HXLINE( 901)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            						}
            					}
            					break;
            					default:{
HXLINE( 903)						this->invalidChar(c);
            					}
            				}
            			}
            			else {
HXLINE( 905)				if ((c == (int)92)) {
HXLINE( 906)					esc = true;
            				}
            				else {
HXLINE( 907)					if ((c == until)) {
HXLINE( 908)						goto _hx_goto_34;
            					}
            					else {
HXLINE( 910)						if ((c == (int)10)) {
HXLINE( 910)							this->line++;
            						}
HXLINE( 911)						b->writeByte(c);
            					}
            				}
            			}
            		}
            		_hx_goto_34:;
HXLINE( 914)		return b->getBytes()->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,readString,return )

::hx::EnumBase Parser_obj::token(){
            	HX_STACK_FRAME("hscript.Parser","token",0x3cb36b25,"hscript.Parser.token","hscript/Parser.hx",917,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 935)		Bool _hx_tmp = hx::IsNotNull( this->tokens->head );
HXDLIN( 935)		if (_hx_tmp) {
HXLINE( 936)			HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 936)			HX_VARI(  ::haxe::ds::GenericCell_hscript_Token,k) = _this->head;
HXDLIN( 936)			Bool _hx_tmp1 = hx::IsNull( k );
HXDLIN( 936)			if (_hx_tmp1) {
HXLINE( 936)				return null();
            			}
            			else {
HXLINE( 936)				_this->head = k->next;
HXDLIN( 936)				return k->elt;
            			}
            		}
HXLINE( 938)		HX_VAR_NAME( Int,_hx_char,"char");
HXLINE( 939)		Bool _hx_tmp2 = (this->_hx_char < (int)0);
HXDLIN( 939)		if (_hx_tmp2) {
HXLINE( 940)			_hx_char = this->readChar();
            		}
            		else {
HXLINE( 942)			_hx_char = this->_hx_char;
HXLINE( 943)			this->_hx_char = (int)-1;
            		}
HXLINE( 945)		while(true){
HXLINE( 946)			switch((int)(_hx_char)){
            				case (int)0: {
HXLINE( 947)					return ::hscript::Token_obj::TEof_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE( 952)					this->line++;
            				}
            				break;
            				case (int)9: case (int)13: case (int)32: {
            				}
            				break;
            				case (int)34: {
HXLINE(1058)					::String _hx_tmp3 = this->readString((int)34);
HXDLIN(1058)					::hx::EnumBase _hx_tmp4 = ::hscript::Const_obj::CString(_hx_tmp3);
HXDLIN(1058)					return ::hscript::Token_obj::TConst(_hx_tmp4);
            				}
            				break;
            				case (int)39: {
HXLINE(1057)					::String _hx_tmp5 = this->readString((int)39);
HXDLIN(1057)					::hx::EnumBase _hx_tmp6 = ::hscript::Const_obj::CString(_hx_tmp5);
HXDLIN(1057)					return ::hscript::Token_obj::TConst(_hx_tmp6);
            				}
            				break;
            				case (int)40: {
HXLINE(1024)					return ::hscript::Token_obj::TPOpen_dyn();
            				}
            				break;
            				case (int)41: {
HXLINE(1025)					return ::hscript::Token_obj::TPClose_dyn();
            				}
            				break;
            				case (int)44: {
HXLINE(1026)					return ::hscript::Token_obj::TComma_dyn();
            				}
            				break;
            				case (int)46: {
HXLINE(1028)					_hx_char = this->readChar();
HXLINE(1029)					switch((int)(_hx_char)){
            						case (int)46: {
HXLINE(1045)							_hx_char = this->readChar();
HXLINE(1046)							if ((_hx_char != (int)46)) {
HXLINE(1047)								this->invalidChar(_hx_char);
            							}
HXLINE(1048)							return ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
            						}
            						break;
            						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1031)							HX_VARI( Int,n) = (_hx_char - (int)48);
HXLINE(1032)							HX_VARI( Int,exp) = (int)1;
HXLINE(1033)							while(true){
HXLINE(1034)								_hx_char = this->readChar();
HXLINE(1035)								hx::MultEq(exp,(int)10);
HXLINE(1036)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1038)										Int _hx_tmp7 = (n * (int)10);
HXDLIN(1038)										n = (_hx_tmp7 + (_hx_char - (int)48));
            									}
            									break;
            									default:{
HXLINE(1040)										this->_hx_char = _hx_char;
HXLINE(1041)										::hx::EnumBase _hx_tmp8 = ::hscript::Const_obj::CFloat(((Float)n / (Float)exp));
HXDLIN(1041)										return ::hscript::Token_obj::TConst(_hx_tmp8);
            									}
            								}
            							}
            						}
            						break;
            						default:{
HXLINE(1050)							this->_hx_char = _hx_char;
HXLINE(1051)							return ::hscript::Token_obj::TDot_dyn();
            						}
            					}
            				}
            				break;
            				case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE( 957)					HX_VARI_NAME( Float,n1,"n") = ((_hx_char - (int)48) * ((Float)1.0));
HXLINE( 958)					HX_VARI_NAME( Float,exp1,"exp") = ((Float)0.);
HXLINE( 959)					while(true){
HXLINE( 960)						_hx_char = this->readChar();
HXLINE( 961)						hx::MultEq(exp1,(int)10);
HXLINE( 962)						switch((int)(_hx_char)){
            							case (int)46: {
HXLINE( 966)								if ((exp1 > (int)0)) {
HXLINE( 968)									Bool _hx_tmp9;
HXDLIN( 968)									if ((exp1 == (int)10)) {
HXLINE( 968)										Int _hx_tmp10 = this->readChar();
HXDLIN( 968)										_hx_tmp9 = (_hx_tmp10 == (int)46);
            									}
            									else {
HXLINE( 968)										_hx_tmp9 = false;
            									}
HXDLIN( 968)									if (_hx_tmp9) {
HXLINE( 969)										{
HXLINE( 969)											::hx::EnumBase tk = ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
HXDLIN( 969)											{
HXLINE( 969)												HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 969)												_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            											}
            										}
HXLINE( 970)										HX_VARI( Int,i) = ::Std_obj::_hx_int(n1);
HXLINE( 971)										::hx::EnumBase _hx_tmp11;
HXDLIN( 971)										if ((i == n1)) {
HXLINE( 971)											_hx_tmp11 = ::hscript::Const_obj::CInt(i);
            										}
            										else {
HXLINE( 971)											_hx_tmp11 = ::hscript::Const_obj::CFloat(n1);
            										}
HXDLIN( 971)										return ::hscript::Token_obj::TConst(_hx_tmp11);
            									}
HXLINE( 973)									this->invalidChar(_hx_char);
            								}
HXLINE( 975)								exp1 = ((Float)1.);
            							}
            							break;
            							case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE( 964)								Float _hx_tmp12 = (n1 * (int)10);
HXDLIN( 964)								n1 = (_hx_tmp12 + (_hx_char - (int)48));
            							}
            							break;
            							case (int)120: {
HXLINE( 977)								Bool _hx_tmp13;
HXDLIN( 977)								if (!((n1 > (int)0))) {
HXLINE( 977)									_hx_tmp13 = (exp1 > (int)0);
            								}
            								else {
HXLINE( 977)									_hx_tmp13 = true;
            								}
HXDLIN( 977)								if (_hx_tmp13) {
HXLINE( 978)									this->invalidChar(_hx_char);
            								}
HXLINE( 981)								HX_VARI_NAME( Int,n2,"n") = (int)0;
HXLINE( 982)								while(true){
HXLINE( 983)									_hx_char = this->readChar();
HXLINE( 984)									switch((int)(_hx_char)){
            										case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE( 986)											Int _hx_tmp14 = (((int)n2 << (int)(int)4) + _hx_char);
HXDLIN( 986)											n2 = (_hx_tmp14 - (int)48);
            										}
            										break;
            										case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE( 988)											Int _hx_tmp15 = ((int)n2 << (int)(int)4);
HXDLIN( 988)											n2 = (_hx_tmp15 + (_hx_char - (int)55));
            										}
            										break;
            										case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE( 990)											Int _hx_tmp16 = ((int)n2 << (int)(int)4);
HXDLIN( 990)											n2 = (_hx_tmp16 + (_hx_char - (int)87));
            										}
            										break;
            										default:{
HXLINE( 992)											this->_hx_char = _hx_char;
HXLINE( 993)											::hx::EnumBase _hx_tmp17 = ::hscript::Const_obj::CInt(n2);
HXDLIN( 993)											return ::hscript::Token_obj::TConst(_hx_tmp17);
            										}
            									}
            								}
            							}
            							break;
            							default:{
HXLINE(1018)								this->_hx_char = _hx_char;
HXLINE(1019)								HX_VARI_NAME( Int,i1,"i") = ::Std_obj::_hx_int(n1);
HXLINE(1020)								::hx::EnumBase _hx_tmp18;
HXDLIN(1020)								if ((exp1 > (int)0)) {
HXLINE(1020)									_hx_tmp18 = ::hscript::Const_obj::CFloat(((Float)(n1 * (int)10) / (Float)exp1));
            								}
            								else {
HXLINE(1020)									if ((i1 == n1)) {
HXLINE(1020)										_hx_tmp18 = ::hscript::Const_obj::CInt(i1);
            									}
            									else {
HXLINE(1020)										_hx_tmp18 = ::hscript::Const_obj::CFloat(n1);
            									}
            								}
HXDLIN(1020)								return ::hscript::Token_obj::TConst(_hx_tmp18);
            							}
            						}
            					}
            				}
            				break;
            				case (int)58: {
HXLINE(1060)					return ::hscript::Token_obj::TDoubleDot_dyn();
            				}
            				break;
            				case (int)59: {
HXLINE(1023)					return ::hscript::Token_obj::TSemicolon_dyn();
            				}
            				break;
            				case (int)61: {
HXLINE(1062)					_hx_char = this->readChar();
HXLINE(1063)					if ((_hx_char == (int)61)) {
HXLINE(1064)						return ::hscript::Token_obj::TOp(HX_("==",60,35,00,00));
            					}
HXLINE(1065)					this->_hx_char = _hx_char;
HXLINE(1066)					return ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
            				}
            				break;
            				case (int)63: {
HXLINE(1059)					return ::hscript::Token_obj::TQuestion_dyn();
            				}
            				break;
            				case (int)91: {
HXLINE(1055)					return ::hscript::Token_obj::TBkOpen_dyn();
            				}
            				break;
            				case (int)93: {
HXLINE(1056)					return ::hscript::Token_obj::TBkClose_dyn();
            				}
            				break;
            				case (int)123: {
HXLINE(1053)					return ::hscript::Token_obj::TBrOpen_dyn();
            				}
            				break;
            				case (int)125: {
HXLINE(1054)					return ::hscript::Token_obj::TBrClose_dyn();
            				}
            				break;
            				default:{
HXLINE(1068)					Bool _hx_tmp19 = this->ops->__get(_hx_char);
HXDLIN(1068)					if (_hx_tmp19) {
HXLINE(1069)						HX_VARI( ::String,op) = ::String::fromCharCode(_hx_char);
HXLINE(1070)						HX_VARI( Int,prev) = (int)-1;
HXLINE(1071)						while(true){
HXLINE(1072)							_hx_char = this->readChar();
HXLINE(1073)							Bool _hx_tmp20;
HXDLIN(1073)							if (!(!(this->ops->__get(_hx_char)))) {
HXLINE(1073)								_hx_tmp20 = (prev == (int)61);
            							}
            							else {
HXLINE(1073)								_hx_tmp20 = true;
            							}
HXDLIN(1073)							if (_hx_tmp20) {
HXLINE(1074)								 ::Dynamic _hx_tmp21 = op.charCodeAt((int)0);
HXDLIN(1074)								if (hx::IsEq( _hx_tmp21,(int)47 )) {
HXLINE(1075)									return this->tokenComment(op,_hx_char);
            								}
HXLINE(1076)								this->_hx_char = _hx_char;
HXLINE(1077)								return ::hscript::Token_obj::TOp(op);
            							}
HXLINE(1079)							prev = _hx_char;
HXLINE(1080)							hx::AddEq(op,::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1083)					Bool _hx_tmp22 = this->idents->__get(_hx_char);
HXDLIN(1083)					if (_hx_tmp22) {
HXLINE(1084)						HX_VARI( ::String,id) = ::String::fromCharCode(_hx_char);
HXLINE(1085)						while(true){
HXLINE(1086)							_hx_char = this->readChar();
HXLINE(1087)							Bool _hx_tmp23 = !(this->idents->__get(_hx_char));
HXDLIN(1087)							if (_hx_tmp23) {
HXLINE(1088)								this->_hx_char = _hx_char;
HXLINE(1089)								return ::hscript::Token_obj::TId(id);
            							}
HXLINE(1091)							hx::AddEq(id,::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1094)					this->invalidChar(_hx_char);
            				}
            			}
HXLINE(1096)			_hx_char = this->readChar();
            		}
HXLINE( 945)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,token,return )

::hx::EnumBase Parser_obj::tokenComment(::String op,Int _hx_char){
            	HX_STACK_FRAME("hscript.Parser","tokenComment",0xb86c15ba,"hscript.Parser.tokenComment","hscript/Parser.hx",1101,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(_hx_char,"char")
HXLINE(1102)		HX_VARI(  ::Dynamic,c) = op.charCodeAt((int)1);
HXLINE(1103)		HX_VARI(  ::haxe::io::Input,s) = this->input;
HXLINE(1104)		if (hx::IsEq( c,(int)47 )) {
HXLINE(1105)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1106)				while(true){
HXLINE(1106)					Bool _hx_tmp;
HXDLIN(1106)					if ((_hx_char != (int)13)) {
HXLINE(1106)						_hx_tmp = (_hx_char != (int)10);
            					}
            					else {
HXLINE(1106)						_hx_tmp = false;
            					}
HXDLIN(1106)					if (!(_hx_tmp)) {
HXLINE(1106)						goto _hx_goto_43;
            					}
HXLINE(1108)					_hx_char = s->readByte();
            				}
            				_hx_goto_43:;
HXLINE(1110)				this->_hx_char = _hx_char;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1113)			return this->token();
            		}
HXLINE(1115)		if (hx::IsEq( c,(int)42 )) {
HXLINE(1116)			HX_VARI( Int,old) = this->line;
HXLINE(1117)			if ((op == HX_("/**/",a0,0a,31,1f))) {
HXLINE(1118)				this->_hx_char = _hx_char;
HXLINE(1119)				return this->token();
            			}
HXLINE(1121)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1122)				while(true){
HXLINE(1123)					while((_hx_char != (int)42)){
HXLINE(1124)						if ((_hx_char == (int)10)) {
HXLINE(1124)							this->line++;
            						}
HXLINE(1126)						_hx_char = s->readByte();
            					}
HXLINE(1129)					_hx_char = s->readByte();
HXLINE(1130)					if ((_hx_char == (int)47)) {
HXLINE(1131)						goto _hx_goto_44;
            					}
            				}
            				_hx_goto_44:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e1 = _hx_e;
HXLINE(1134)					this->line = old;
HXLINE(1135)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedComment_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1137)			return this->token();
            		}
HXLINE(1139)		this->_hx_char = _hx_char;
HXLINE(1140)		return ::hscript::Token_obj::TOp(op);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,tokenComment,return )

::String Parser_obj::constString(::hx::EnumBase c){
            	HX_STACK_FRAME("hscript.Parser","constString",0x0a4693c0,"hscript.Parser.constString","hscript/Parser.hx",1144,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE(1144)		Int _hx_tmp = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN(1144)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(1144)				return ::Std_obj::string(c->_hx_getInt(0));
            			}
            			break;
            			case (int)1: {
HXLINE(1144)				return ::Std_obj::string(c->_hx_getFloat(0));
            			}
            			break;
            			case (int)2: {
HXLINE(1144)				return c->_hx_getString(0);
            			}
            			break;
            		}
HXDLIN(1144)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,constString,return )

::String Parser_obj::tokenString(::hx::EnumBase t){
            	HX_STACK_FRAME("hscript.Parser","tokenString",0x05f471d6,"hscript.Parser.tokenString","hscript/Parser.hx",1155,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(1155)		Int _hx_tmp = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN(1155)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(1155)				return HX_("<eof>",3e,ee,21,cf);
            			}
            			break;
            			case (int)1: {
HXLINE(1155)				return this->constString(t->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)2: {
HXLINE(1155)				return t->_hx_getString(0);
            			}
            			break;
            			case (int)3: {
HXLINE(1155)				return t->_hx_getString(0);
            			}
            			break;
            			case (int)4: {
HXLINE(1155)				return HX_("(",28,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(1155)				return HX_(")",29,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE(1155)				return HX_("{",7b,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE(1155)				return HX_("}",7d,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE(1155)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE(1155)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE(1155)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE(1155)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE(1155)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE(1155)				return HX_("?",3f,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE(1155)				return HX_(":",3a,00,00,00);
            			}
            			break;
            		}
HXDLIN(1155)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,tokenString,return )

Int Parser_obj::p1;

Int Parser_obj::readPos;

Int Parser_obj::tokenMin;

Int Parser_obj::tokenMax;


Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(opChars,"opChars");
	HX_MARK_MEMBER_NAME(identChars,"identChars");
	HX_MARK_MEMBER_NAME(opPriority,"opPriority");
	HX_MARK_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_MARK_MEMBER_NAME(unops,"unops");
	HX_MARK_MEMBER_NAME(allowJSON,"allowJSON");
	HX_MARK_MEMBER_NAME(allowTypes,"allowTypes");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(idents,"idents");
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(opChars,"opChars");
	HX_VISIT_MEMBER_NAME(identChars,"identChars");
	HX_VISIT_MEMBER_NAME(opPriority,"opPriority");
	HX_VISIT_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_VISIT_MEMBER_NAME(unops,"unops");
	HX_VISIT_MEMBER_NAME(allowJSON,"allowJSON");
	HX_VISIT_MEMBER_NAME(allowTypes,"allowTypes");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(idents,"idents");
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
}

hx::Val Parser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mk") ) { return hx::Val( mk_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { return hx::Val( ops); }
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line); }
		if (HX_FIELD_EQ(inName,"char") ) { return hx::Val( _hx_char); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"expr") ) { return hx::Val( expr_dyn()); }
		if (HX_FIELD_EQ(inName,"pmin") ) { return hx::Val( pmin_dyn()); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return hx::Val( pmax_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { return hx::Val( unops); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn()); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn()); }
		if (HX_FIELD_EQ(inName,"token") ) { return hx::Val( token_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { return hx::Val( idents); }
		if (HX_FIELD_EQ(inName,"tokens") ) { return hx::Val( tokens); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return hx::Val( ensure_dyn()); }
		if (HX_FIELD_EQ(inName,"incPos") ) { return hx::Val( incPos_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { return hx::Val( opChars); }
		if (HX_FIELD_EQ(inName,"isBlock") ) { return hx::Val( isBlock_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapCompr") ) { return hx::Val( mapCompr_dyn()); }
		if (HX_FIELD_EQ(inName,"makeUnop") ) { return hx::Val( makeUnop_dyn()); }
		if (HX_FIELD_EQ(inName,"readChar") ) { return hx::Val( readChar_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { return hx::Val( allowJSON); }
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return hx::Val( parseExpr_dyn()); }
		if (HX_FIELD_EQ(inName,"makeBinop") ) { return hx::Val( makeBinop_dyn()); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return hx::Val( parseType_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { return hx::Val( identChars); }
		if (HX_FIELD_EQ(inName,"opPriority") ) { return hx::Val( opPriority); }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { return hx::Val( allowTypes); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return hx::Val( unexpected_dyn()); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return hx::Val( invalidChar_dyn()); }
		if (HX_FIELD_EQ(inName,"parseString") ) { return hx::Val( parseString_dyn()); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return hx::Val( parseObject_dyn()); }
		if (HX_FIELD_EQ(inName,"constString") ) { return hx::Val( constString_dyn()); }
		if (HX_FIELD_EQ(inName,"tokenString") ) { return hx::Val( tokenString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { return hx::Val( opRightAssoc); }
		if (HX_FIELD_EQ(inName,"tokenComment") ) { return hx::Val( tokenComment_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"parseFullExpr") ) { return hx::Val( parseFullExpr_dyn()); }
		if (HX_FIELD_EQ(inName,"parseExprNext") ) { return hx::Val( parseExprNext_dyn()); }
		if (HX_FIELD_EQ(inName,"parseTypeNext") ) { return hx::Val( parseTypeNext_dyn()); }
		if (HX_FIELD_EQ(inName,"parseExprList") ) { return hx::Val( parseExprList_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseStructure") ) { return hx::Val( parseStructure_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Parser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { ops=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { unops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { idents=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast<  ::haxe::ds::GenericStack_hscript_Token >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { opChars=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { allowJSON=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { identChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opPriority") ) { opPriority=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { allowTypes=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { opRightAssoc=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"));
	outFields->push(HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"));
	outFields->push(HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"));
	outFields->push(HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"));
	outFields->push(HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"));
	outFields->push(HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"));
	outFields->push(HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"));
	outFields->push(HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"));
	outFields->push(HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"));
	outFields->push(HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"));
	outFields->push(HX_HCSTRING("uid","\x90","\x23","\x59","\x00"));
	outFields->push(HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Parser_obj,line),HX_HCSTRING("line","\xf4","\x17","\xb3","\x47")},
	{hx::fsString,(int)offsetof(Parser_obj,opChars),HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8")},
	{hx::fsString,(int)offsetof(Parser_obj,identChars),HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opPriority),HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opRightAssoc),HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,unops),HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowJSON),HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowTypes),HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(Parser_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(Parser_obj,_hx_char),HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,ops),HX_HCSTRING("ops","\x32","\x9c","\x54","\x00")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,idents),HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2")},
	{hx::fsInt,(int)offsetof(Parser_obj,uid),HX_HCSTRING("uid","\x90","\x23","\x59","\x00")},
	{hx::fsObject /*::haxe::ds::GenericStack_hscript_Token*/ ,(int)offsetof(Parser_obj,tokens),HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Parser_obj::p1,HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsInt,(void *) &Parser_obj::readPos,HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02")},
	{hx::fsInt,(void *) &Parser_obj::tokenMin,HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b")},
	{hx::fsInt,(void *) &Parser_obj::tokenMax,HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"),
	HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"),
	HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"),
	HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"),
	HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"),
	HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"),
	HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"),
	HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"),
	HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"),
	HX_HCSTRING("uid","\x90","\x23","\x59","\x00"),
	HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("invalidChar","\x6d","\xad","\xce","\xa9"),
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("unexpected","\xd1","\x15","\xf4","\xc5"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("ensure","\xbe","\xf5","\x7b","\x04"),
	HX_HCSTRING("expr","\x35","\xfd","\x1d","\x43"),
	HX_HCSTRING("pmin","\x22","\xf7","\x5a","\x4a"),
	HX_HCSTRING("pmax","\x34","\xf0","\x5a","\x4a"),
	HX_HCSTRING("mk","\x5e","\x5f","\x00","\x00"),
	HX_HCSTRING("isBlock","\x03","\x19","\x82","\x51"),
	HX_HCSTRING("parseFullExpr","\xb7","\xbd","\x60","\x9c"),
	HX_HCSTRING("parseObject","\x52","\x2b","\x7c","\x90"),
	HX_HCSTRING("parseExpr","\x08","\x4f","\xc4","\xca"),
	HX_HCSTRING("mapCompr","\x47","\xa4","\x9f","\xc1"),
	HX_HCSTRING("makeUnop","\xc8","\xc4","\x47","\x44"),
	HX_HCSTRING("makeBinop","\xda","\x90","\x98","\x86"),
	HX_HCSTRING("parseStructure","\x80","\x85","\x70","\x8b"),
	HX_HCSTRING("parseExprNext","\x1b","\x24","\xa8","\xf3"),
	HX_HCSTRING("parseType","\x8d","\x44","\xaf","\xd4"),
	HX_HCSTRING("parseTypeNext","\x20","\xc0","\xfc","\xfa"),
	HX_HCSTRING("parseExprList","\x86","\xbb","\x58","\xf2"),
	HX_HCSTRING("incPos","\x56","\xe7","\x39","\x93"),
	HX_HCSTRING("readChar","\x4c","\x39","\xb7","\x69"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("token","\xf9","\x82","\x2b","\x14"),
	HX_HCSTRING("tokenComment","\x66","\x60","\xfb","\x25"),
	HX_HCSTRING("constString","\x94","\x42","\x30","\xa9"),
	HX_HCSTRING("tokenString","\xaa","\x20","\xde","\xa4"),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_MARK_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_VISIT_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#endif

hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02"),
	HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b"),
	HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b"),
	::String(null())
};

void Parser_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hscript.Parser","\x9a","\x9f","\xf2","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",87,0x98735743)
HXLINE(  87)		p1 = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",88,0x98735743)
HXLINE(  88)		readPos = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",89,0x98735743)
HXLINE(  89)		tokenMin = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",90,0x98735743)
HXLINE(  90)		tokenMax = (int)0;
            	}
}

} // end namespace hscript
