// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_WinState
#include <WinState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif


void WinState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("WinState","new",0x8ba493e7,"WinState.new","WinState.hx",10,0x86f0a569)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  10)		super::__construct(MaxSize);
            	}

Dynamic WinState_obj::__CreateEmpty() { return new WinState_obj; }

hx::ObjectPtr< WinState_obj > WinState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< WinState_obj > _hx_result = new WinState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic WinState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WinState_obj > _hx_result = new WinState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void WinState_obj::create(){
            	HX_STACK_FRAME("WinState","create",0x209651d5,"WinState.create","WinState.hx",13,0x86f0a569)
            	HX_STACK_THIS(this)
HXLINE(  14)		this->super::create();
HXLINE(  16)		HX_VAR(  ::flixel::text::FlxText,t);
HXLINE(  17)		Float _hx_tmp = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) - (int)20);
HXDLIN(  17)		t =  ::flixel::text::FlxText_obj::__new((int)0,_hx_tmp,::flixel::FlxG_obj::width,HX_("The Reef is Clear, Thank you",c1,90,3f,55),null(),null());
HXLINE(  18)		t->setFormat(HX_("assets/fonts/Oswald-Regular.ttf",e4,c6,d9,7e),(int)42,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  19)		this->add(t);
HXLINE(  21)		Float _hx_tmp1 = (((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)60);
HXDLIN(  21)		t =  ::flixel::text::FlxText_obj::__new((int)0,_hx_tmp1,::flixel::FlxG_obj::width,HX_("Press 'Escape' to quit",f0,7c,b5,12),null(),null());
HXLINE(  22)		t->setFormat(HX_("assets/fonts/Oswald-Regular.ttf",e4,c6,d9,7e),(int)16,(int)-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),null(),null());
HXLINE(  23)		this->add(t);
            	}


void WinState_obj::update(Float elapsed){
            	HX_STACK_FRAME("WinState","update",0x2b8c70e2,"WinState.update","WinState.hx",27,0x86f0a569)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  28)		HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  28)		Bool _hx_tmp = _this->keyManager->checkStatus((int)27,_this->status);
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  30)			::openfl::_legacy::Lib_obj::close();
            		}
HXLINE(  33)		this->super::update(elapsed);
            	}



WinState_obj::WinState_obj()
{
}

hx::Val WinState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *WinState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *WinState_obj_sStaticStorageInfo = 0;
#endif

static ::String WinState_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void WinState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WinState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WinState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WinState_obj::__mClass,"__mClass");
};

#endif

hx::Class WinState_obj::__mClass;

void WinState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("WinState","\x75","\x14","\xed","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WinState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WinState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WinState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WinState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WinState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WinState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

